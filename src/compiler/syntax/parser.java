
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 10 20:36:52 CEST 2022
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 10 20:36:52 CEST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\062\002\000\002\002" +
    "\004\000\002\003\003\000\002\004\002\000\002\063\002" +
    "\000\002\005\010\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\004\000\002" +
    "\007\003\000\002\064\002\000\002\010\017\000\002\010" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\013\004\000" +
    "\002\013\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\025\004\000\002\025\003\000\002\014" +
    "\007\000\002\014\003\000\002\016\005\000\002\016\003" +
    "\000\002\016\003\000\002\017\004\000\002\017\003\000" +
    "\002\021\003\000\002\021\003\000\002\022\003\000\002" +
    "\065\002\000\002\034\022\000\002\066\002\000\002\067" +
    "\002\000\002\035\025\000\002\036\003\000\002\036\003" +
    "\000\002\020\004\000\002\020\003\000\002\023\004\000" +
    "\002\023\003\000\002\070\002\000\002\024\016\000\002" +
    "\026\005\000\002\026\005\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\005\000" +
    "\002\027\003\000\002\030\005\000\002\030\005\000\002" +
    "\030\003\000\002\031\004\000\002\031\003\000\002\032" +
    "\005\000\002\032\005\000\002\033\006\000\002\041\003" +
    "\000\002\041\003\000\002\042\006\000\002\060\003\000" +
    "\002\037\003\000\002\040\006\000\002\061\004\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\047\004\000\002\047\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\050\004\000\002\050\003\000\002\071\002\000\002\051" +
    "\014\000\002\072\002\000\002\052\014\000\002\054\005" +
    "\000\002\054\003\000\002\053\005\000\002\053\003\000" +
    "\002\073\002\000\002\055\016\000\002\074\002\000\002" +
    "\056\016\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\044\007\000\002\057\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\004\011\000\001\002\000\004\002\364\001" +
    "\002\000\004\011\010\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\ufffe\001\002\000\004\024\011\001\002\000" +
    "\004\052\uffd0\001\002\000\004\052\013\001\002\000\014" +
    "\027\ufffd\041\ufffd\042\ufffd\045\015\050\ufffd\001\002\000" +
    "\012\027\ufffd\041\ufffd\042\032\050\ufffd\001\002\000\014" +
    "\024\020\027\ufffd\041\ufffd\042\ufffd\050\ufffd\001\002\000" +
    "\012\027\ufff5\041\ufff5\042\ufff5\050\ufff5\001\002\000\012" +
    "\027\ufff6\041\ufff6\042\ufff6\050\ufff6\001\002\000\004\055" +
    "\022\001\002\000\012\027\ufffa\041\ufffa\042\ufffa\050\ufffa" +
    "\001\002\000\010\031\026\035\024\047\023\001\002\000" +
    "\004\053\ufff7\001\002\000\004\053\ufff8\001\002\000\004" +
    "\053\027\001\002\000\004\053\ufff9\001\002\000\014\024" +
    "\ufffc\027\ufffc\041\ufffc\042\ufffc\050\ufffc\001\002\000\014" +
    "\024\020\027\ufffd\041\ufffd\042\ufffd\050\ufffd\001\002\000" +
    "\012\027\ufffb\041\ufffb\042\ufffb\050\ufffb\001\002\000\012" +
    "\024\346\027\ufffd\041\ufffd\050\ufffd\001\002\000\010\027" +
    "\036\041\ufffd\050\ufffd\001\002\000\010\027\uffeb\041\uffeb" +
    "\050\uffeb\001\002\000\006\041\131\050\ufffd\001\002\000" +
    "\030\007\052\021\057\024\047\031\054\032\055\033\040" +
    "\035\041\041\ufffd\047\053\050\ufffd\052\ufffd\001\002\000" +
    "\006\041\uffdf\050\uffdf\001\002\000\020\007\052\021\057" +
    "\024\047\031\054\033\040\035\041\047\053\001\002\000" +
    "\032\004\uffca\006\uffca\023\uffca\025\uffca\034\uffca\037\uffca" +
    "\040\uffca\043\uffca\051\uffca\052\uffca\053\uffca\054\uffca\001" +
    "\002\000\006\041\uffe0\050\uffe0\001\002\000\004\052\116" +
    "\001\002\000\022\025\073\034\uffe6\037\074\040\071\043" +
    "\uffe6\051\067\052\uffe6\054\072\001\002\000\032\004\uffbf" +
    "\006\uffbf\023\uffbf\025\uffbf\034\uffbf\037\uffbf\040\uffbf\043" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\001\002\000\032" +
    "\004\uffc1\006\uffc1\023\uffc1\025\uffc1\034\uffc1\037\uffc1\040" +
    "\uffc1\043\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\001\002" +
    "\000\036\004\uffcc\006\uffcc\021\105\023\uffcc\025\uffcc\033" +
    "\104\034\uffcc\037\uffcc\040\uffcc\043\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\001\002\000\032\004\uffc4\006\uffc4\023" +
    "\uffc4\025\uffc4\034\uffc4\037\uffc4\040\uffc4\043\uffc4\051\uffc4" +
    "\052\uffc4\053\uffc4\054\uffc4\001\002\000\032\004\uffc6\006" +
    "\uffc6\023\uffc6\025\uffc6\034\uffc6\037\uffc6\040\uffc6\043\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\054\uffc6\001\002\000\020\007" +
    "\052\021\057\024\047\031\054\033\040\035\041\047\053" +
    "\001\002\000\032\004\uffc7\006\uffc7\023\uffc7\025\uffc7\034" +
    "\uffc7\037\uffc7\040\uffc7\043\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\001\002\000\032\004\uffc9\006\uffc9\023\uffc9\025" +
    "\uffc9\034\uffc9\037\uffc9\040\uffc9\043\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\001\002\000\004\024\102\001\002\000" +
    "\032\004\uffcb\006\uffcb\023\uffcb\025\uffcb\034\uffcb\037\uffcb" +
    "\040\uffcb\043\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\001" +
    "\002\000\020\007\052\021\057\024\047\031\054\033\040" +
    "\035\041\047\053\001\002\000\010\034\uffe2\043\063\052" +
    "\uffe2\001\002\000\032\004\uffc8\006\uffc8\023\uffc8\025\uffc8" +
    "\034\uffc8\037\uffc8\040\uffc8\043\uffc8\051\uffc8\052\uffc8\053" +
    "\uffc8\054\uffc8\001\002\000\012\034\uffe4\041\uffe4\050\uffe4" +
    "\052\uffe1\001\002\000\026\007\052\021\057\024\047\031" +
    "\054\032\055\033\040\034\ufffd\035\041\047\053\052\ufffd" +
    "\001\002\000\006\034\uffe3\052\uffe3\001\002\000\006\034" +
    "\uffe1\052\uffe1\001\002\000\016\023\070\025\073\037\074" +
    "\040\071\051\067\054\072\001\002\000\020\007\052\021" +
    "\057\024\047\031\054\033\040\035\041\047\053\001\002" +
    "\000\032\004\uffbd\006\uffbd\023\uffbd\025\uffbd\034\uffbd\037" +
    "\uffbd\040\uffbd\043\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\001\002\000\020\007\052\021\057\024\047\031\054\033" +
    "\040\035\041\047\053\001\002\000\020\007\052\021\057" +
    "\024\047\031\054\033\040\035\041\047\053\001\002\000" +
    "\020\007\052\021\057\024\047\031\054\033\040\035\041" +
    "\047\053\001\002\000\020\007\052\021\057\024\047\031" +
    "\054\033\040\035\041\047\053\001\002\000\032\004\uffc2" +
    "\006\uffc2\023\uffc2\025\uffc2\034\uffc2\037\uffc2\040\uffc2\043" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\001\002\000\032" +
    "\004\uffcd\006\uffcd\023\uffcd\025\uffcd\034\uffcd\037\074\040" +
    "\uffcd\043\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\001\002" +
    "\000\032\004\uffce\006\uffce\023\uffce\025\uffce\034\uffce\037" +
    "\074\040\uffce\043\uffce\051\uffce\052\uffce\053\uffce\054\uffce" +
    "\001\002\000\032\004\uffc5\006\uffc5\023\uffc5\025\uffc5\034" +
    "\uffc5\037\074\040\uffc5\043\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\001\002\000\032\004\uffc3\006\uffc3\023\uffc3\025" +
    "\uffc3\034\uffc3\037\074\040\uffc3\043\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\001\002\000\010\034\uffe7\043\uffe7\052" +
    "\uffe7\001\002\000\032\004\uffc0\006\uffc0\023\uffc0\025\uffc0" +
    "\034\uffc0\037\uffc0\040\uffc0\043\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\001\002\000\024\007\052\021\057\024\047" +
    "\031\054\032\055\033\040\034\ufffd\035\041\047\053\001" +
    "\002\000\006\024\111\047\106\001\002\000\006\004\uffef" +
    "\023\uffef\001\002\000\006\004\uffed\023\uffed\001\002\000" +
    "\004\023\112\001\002\000\010\004\uffee\021\105\023\uffee" +
    "\001\002\000\034\004\uffbc\006\uffbc\023\uffbc\025\uffbc\034" +
    "\uffbc\037\uffbc\040\uffbc\043\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\001\002\000\004\034\115\001\002\000" +
    "\004\034\uffb7\001\002\000\032\004\uffb6\006\uffb6\023\uffb6" +
    "\025\uffb6\034\uffb6\037\uffb6\040\uffb6\043\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\001\002\000\010\012\122\016\121" +
    "\024\117\001\002\000\034\007\uffe8\021\uffe8\024\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\041\uffe8\047\uffe8" +
    "\050\uffe8\052\uffe8\053\uffe8\001\002\000\034\007\ufffd\021" +
    "\ufffd\024\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\041\ufffd\047\ufffd\050\ufffd\052\ufffd\053\123\001\002\000" +
    "\034\007\uffea\021\uffea\024\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\041\uffea\047\uffea\050\uffea\052\uffea\053" +
    "\uffea\001\002\000\034\007\uffe9\021\uffe9\024\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\041\uffe9\047\uffe9\050" +
    "\uffe9\052\uffe9\053\uffe9\001\002\000\032\007\uffde\021\uffde" +
    "\024\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\041" +
    "\uffde\047\uffde\050\uffde\052\uffde\001\002\000\032\007\052" +
    "\021\057\024\047\031\054\032\055\033\040\034\ufffd\035" +
    "\041\041\ufffd\047\053\050\ufffd\052\ufffd\001\002\000\032" +
    "\007\uffdd\021\uffdd\024\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\041\uffdd\047\uffdd\050\uffdd\052\uffdd\001\002" +
    "\000\010\034\uffe5\041\uffe5\050\uffe5\001\002\000\016\025" +
    "\073\034\130\037\074\040\071\051\067\054\072\001\002" +
    "\000\032\004\uffbe\006\uffbe\023\uffbe\025\uffbe\034\uffbe\037" +
    "\uffbe\040\uffbe\043\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe" +
    "\001\002\000\010\014\225\022\223\050\ufffd\001\002\000" +
    "\004\050\uffd1\001\002\000\004\050\134\001\002\000\014" +
    "\013\ufffd\015\135\017\141\024\142\046\143\001\002\000" +
    "\004\024\210\001\002\000\016\013\uffb4\015\uffb4\017\uffb4" +
    "\024\uffb4\026\uffb4\046\uffb4\001\002\000\004\013\206\001" +
    "\002\000\016\013\ufffd\015\135\017\141\024\142\026\ufffd" +
    "\046\143\001\002\000\020\007\052\021\057\024\047\031" +
    "\054\033\040\035\041\047\053\001\002\000\010\021\105" +
    "\033\104\055\uffbb\001\002\000\004\033\161\001\002\000" +
    "\004\055\155\001\002\000\016\013\uffb1\015\uffb1\017\uffb1" +
    "\024\uffb1\026\uffb1\046\uffb1\001\002\000\016\013\uffb2\015" +
    "\uffb2\017\uffb2\024\uffb2\026\uffb2\046\uffb2\001\002\000\016" +
    "\013\uffb3\015\uffb3\017\uffb3\024\uffb3\026\uffb3\046\uffb3\001" +
    "\002\000\004\053\154\001\002\000\006\013\uffae\026\uffae" +
    "\001\002\000\004\055\uffba\001\002\000\016\013\uffb0\015" +
    "\uffb0\017\uffb0\024\uffb0\026\uffb0\046\uffb0\001\002\000\020" +
    "\010\uffb5\013\uffb5\015\uffb5\017\uffb5\024\uffb5\026\uffb5\046" +
    "\uffb5\001\002\000\020\007\052\021\057\024\047\031\054" +
    "\033\040\035\041\047\053\001\002\000\004\053\160\001" +
    "\002\000\016\025\073\037\074\040\071\051\067\053\uffb8" +
    "\054\072\001\002\000\020\010\uffb9\013\uffb9\015\uffb9\017" +
    "\uffb9\024\uffb9\026\uffb9\046\uffb9\001\002\000\024\007\052" +
    "\021\057\024\047\030\162\031\054\033\040\034\ufffd\035" +
    "\041\047\053\001\002\000\004\034\uff99\001\002\000\016" +
    "\025\073\034\uff98\037\074\040\071\051\067\054\072\001" +
    "\002\000\004\034\166\001\002\000\004\034\uff97\001\002" +
    "\000\004\053\167\001\002\000\020\010\uff96\013\uff96\015" +
    "\uff96\017\uff96\024\uff96\026\uff96\046\uff96\001\002\000\016" +
    "\006\171\025\073\037\074\040\071\051\067\054\072\001" +
    "\002\000\004\052\172\001\002\000\016\013\ufffd\015\135" +
    "\017\141\024\142\026\ufffd\046\143\001\002\000\006\013" +
    "\ufffd\026\175\001\002\000\004\013\uffa5\001\002\000\004" +
    "\052\177\001\002\000\004\013\uff9e\001\002\000\014\013" +
    "\ufffd\015\135\017\141\024\142\046\143\001\002\000\004" +
    "\013\uff9f\001\002\000\004\013\202\001\002\000\004\017" +
    "\203\001\002\000\004\053\204\001\002\000\016\013\uffa4" +
    "\015\uffa4\017\uffa4\024\uffa4\026\uffa4\046\uffa4\001\002\000" +
    "\006\013\uffaf\026\uffaf\001\002\000\004\044\207\001\002" +
    "\000\004\002\uffcf\001\002\000\004\036\211\001\002\000" +
    "\020\007\052\021\057\024\047\031\054\033\040\035\041" +
    "\047\053\001\002\000\016\004\213\025\073\037\074\040" +
    "\071\051\067\054\072\001\002\000\020\007\052\021\057" +
    "\024\047\031\054\033\040\035\041\047\053\001\002\000" +
    "\016\025\073\037\074\040\071\051\067\052\215\054\072" +
    "\001\002\000\014\013\ufffd\015\135\017\141\024\142\046" +
    "\143\001\002\000\004\013\uff9d\001\002\000\004\013\220" +
    "\001\002\000\004\015\221\001\002\000\004\053\222\001" +
    "\002\000\016\013\uff9c\015\uff9c\017\uff9c\024\uff9c\026\uff9c" +
    "\046\uff9c\001\002\000\004\024\252\001\002\000\004\050" +
    "\uffd2\001\002\000\004\024\233\001\002\000\010\014\uffd6" +
    "\022\uffd6\050\uffd6\001\002\000\010\014\uffd5\022\uffd5\050" +
    "\uffd5\001\002\000\010\014\225\022\223\050\ufffd\001\002" +
    "\000\004\050\uffd3\001\002\000\004\050\uffd4\001\002\000" +
    "\004\033\234\001\002\000\026\007\052\021\057\024\047" +
    "\031\054\032\055\033\040\034\ufffd\035\041\047\053\052" +
    "\ufffd\001\002\000\004\034\uffdb\001\002\000\004\034\237" +
    "\001\002\000\004\052\240\001\002\000\014\027\ufffd\041" +
    "\ufffd\042\ufffd\045\015\050\ufffd\001\002\000\012\027\ufffd" +
    "\041\ufffd\042\032\050\ufffd\001\002\000\010\027\036\041" +
    "\ufffd\050\ufffd\001\002\000\006\041\131\050\ufffd\001\002" +
    "\000\004\050\245\001\002\000\012\015\135\017\141\024" +
    "\142\046\143\001\002\000\014\013\ufffd\015\135\017\141" +
    "\024\142\046\143\001\002\000\004\013\250\001\002\000" +
    "\004\053\251\001\002\000\010\014\uffda\022\uffda\050\uffda" +
    "\001\002\000\004\033\253\001\002\000\026\007\052\021" +
    "\057\024\047\031\054\032\055\033\040\034\ufffd\035\041" +
    "\047\053\052\ufffd\001\002\000\004\034\255\001\002\000" +
    "\004\052\256\001\002\000\006\012\260\016\262\001\002" +
    "\000\004\052\uffd9\001\002\000\006\052\ufff0\053\ufff0\001" +
    "\002\000\004\052\uffdc\001\002\000\006\052\ufff1\053\ufff1" +
    "\001\002\000\004\052\264\001\002\000\014\027\ufffd\041" +
    "\ufffd\042\ufffd\045\015\050\ufffd\001\002\000\012\027\ufffd" +
    "\041\ufffd\042\032\050\ufffd\001\002\000\010\027\036\041" +
    "\ufffd\050\ufffd\001\002\000\006\041\131\050\ufffd\001\002" +
    "\000\004\050\271\001\002\000\014\010\302\015\272\017" +
    "\275\024\142\046\143\001\002\000\004\024\332\001\002" +
    "\000\020\010\uffad\013\uffad\015\uffad\017\uffad\024\uffad\026" +
    "\uffad\046\uffad\001\002\000\020\010\uffab\013\uffab\015\uffab" +
    "\017\uffab\024\uffab\026\uffab\046\uffab\001\002\000\020\007" +
    "\052\021\057\024\047\031\054\033\040\035\041\047\053" +
    "\001\002\000\020\010\uffa8\013\uffa8\015\uffa8\017\uffa8\024" +
    "\uffa8\026\uffa8\046\uffa8\001\002\000\020\010\uffac\013\uffac" +
    "\015\uffac\017\uffac\024\uffac\026\uffac\046\uffac\001\002\000" +
    "\016\010\302\013\ufffd\015\272\017\275\024\142\046\143" +
    "\001\002\000\020\010\uffaa\013\uffaa\015\uffaa\017\uffaa\024" +
    "\uffaa\026\uffaa\046\uffaa\001\002\000\020\007\052\021\057" +
    "\024\047\031\054\033\040\035\041\047\053\001\002\000" +
    "\020\010\uffa9\013\uffa9\015\uffa9\017\uffa9\024\uffa9\026\uffa9" +
    "\046\uffa9\001\002\000\016\025\073\037\074\040\071\051" +
    "\067\053\305\054\072\001\002\000\020\010\uff95\013\uff95" +
    "\015\uff95\017\uff95\024\uff95\026\uff95\046\uff95\001\002\000" +
    "\004\013\uffd8\001\002\000\020\010\302\013\ufffd\015\272" +
    "\017\275\024\142\026\ufffd\046\143\001\002\000\006\013" +
    "\uffa6\026\uffa6\001\002\000\006\013\uffa7\026\uffa7\001\002" +
    "\000\004\013\313\001\002\000\004\053\314\001\002\000" +
    "\010\014\uffd7\022\uffd7\050\uffd7\001\002\000\016\006\316" +
    "\025\073\037\074\040\071\051\067\054\072\001\002\000" +
    "\004\052\317\001\002\000\020\010\302\013\ufffd\015\272" +
    "\017\275\024\142\026\ufffd\046\143\001\002\000\006\013" +
    "\ufffd\026\321\001\002\000\004\052\330\001\002\000\004" +
    "\013\uffa3\001\002\000\004\013\uffa0\001\002\000\004\013" +
    "\325\001\002\000\004\017\326\001\002\000\004\053\327" +
    "\001\002\000\020\010\uffa2\013\uffa2\015\uffa2\017\uffa2\024" +
    "\uffa2\026\uffa2\046\uffa2\001\002\000\016\010\302\013\ufffd" +
    "\015\272\017\275\024\142\046\143\001\002\000\004\013" +
    "\uffa1\001\002\000\004\036\333\001\002\000\020\007\052" +
    "\021\057\024\047\031\054\033\040\035\041\047\053\001" +
    "\002\000\016\004\335\025\073\037\074\040\071\051\067" +
    "\054\072\001\002\000\020\007\052\021\057\024\047\031" +
    "\054\033\040\035\041\047\053\001\002\000\016\025\073" +
    "\037\074\040\071\051\067\052\337\054\072\001\002\000" +
    "\016\010\302\013\ufffd\015\272\017\275\024\142\046\143" +
    "\001\002\000\004\013\uff9b\001\002\000\004\013\342\001" +
    "\002\000\004\015\343\001\002\000\004\053\344\001\002" +
    "\000\020\010\uff9a\013\uff9a\015\uff9a\017\uff9a\024\uff9a\026" +
    "\uff9a\046\uff9a\001\002\000\010\027\uffec\041\uffec\050\uffec" +
    "\001\002\000\004\055\350\001\002\000\010\027\ufff2\041" +
    "\ufff2\050\ufff2\001\002\000\004\020\351\001\002\000\004" +
    "\021\352\001\002\000\006\024\111\047\106\001\002\000" +
    "\004\004\354\001\002\000\006\024\111\047\106\001\002" +
    "\000\004\023\356\001\002\000\004\005\357\001\002\000" +
    "\006\012\260\016\262\001\002\000\004\053\361\001\002" +
    "\000\012\024\ufff4\027\ufff4\041\ufff4\050\ufff4\001\002\000" +
    "\012\024\346\027\ufffd\041\ufffd\050\ufffd\001\002\000\010" +
    "\027\ufff3\041\ufff3\050\ufff3\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\006\002\003\062\004\001\001\000\002\001" +
    "\001\000\006\003\005\024\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\011\001" +
    "\001\000\002\001\001\000\006\004\015\007\013\001\001" +
    "\000\006\004\033\013\032\001\001\000\006\004\020\005" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\027\001\001\000\006\004\020\005" +
    "\030\001\001\000\002\001\001\000\006\004\346\010\344" +
    "\001\001\000\006\004\036\017\034\001\001\000\002\001" +
    "\001\000\006\004\131\023\132\001\001\000\030\004\061" +
    "\014\041\016\042\025\057\026\043\027\050\030\047\031" +
    "\045\032\044\033\060\040\055\001\001\000\002\001\001" +
    "\000\020\026\126\027\050\030\047\031\045\032\044\033" +
    "\060\040\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\026\102\027\050\030\047\031\045\032" +
    "\044\033\060\040\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\026" +
    "\065\027\050\030\047\031\045\032\044\033\060\040\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\064\016\063\025\057\026\043\027\050" +
    "\030\047\031\045\032\044\033\060\040\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\026\100\027\050\030\047\031\045\032\044\033\060\040" +
    "\055\001\001\000\002\001\001\000\020\026\077\027\050" +
    "\030\047\031\045\032\044\033\060\040\055\001\001\000" +
    "\020\026\076\027\050\030\047\031\045\032\044\033\060" +
    "\040\055\001\001\000\020\026\075\027\050\030\047\031" +
    "\045\032\044\033\060\040\055\001\001\000\020\026\074" +
    "\027\050\030\047\031\045\032\044\033\060\040\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\064\016\113\025\057\026\043" +
    "\027\050\030\047\031\045\032\044\033\060\037\112\040" +
    "\055\001\001\000\006\012\107\033\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\117\001\001\000\002\001" +
    "\001\000\006\004\124\021\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\061\014" +
    "\125\016\042\025\057\026\043\027\050\030\047\031\045" +
    "\032\044\033\060\040\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\230\020\223\034\225\035\226\036\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\150\033\151" +
    "\040\147\041\143\042\135\044\144\045\137\047\136\051" +
    "\146\055\145\061\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\150\033\151\040" +
    "\147\041\143\042\135\044\144\045\137\047\204\051\146" +
    "\055\145\061\152\001\001\000\020\026\167\027\050\030" +
    "\047\031\045\032\044\033\060\040\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\026\156\027\050\030\047\031\045" +
    "\032\044\033\060\040\055\060\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\164" +
    "\026\162\027\050\030\047\031\045\032\044\033\060\040" +
    "\055\043\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\150\033\151\040\147\041\143\042\135\044\144\045" +
    "\137\047\172\051\146\055\145\061\152\001\001\000\006" +
    "\004\175\053\173\001\001\000\004\071\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\150\033\151" +
    "\040\147\041\143\042\135\044\144\045\137\047\177\051" +
    "\146\055\145\061\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\026\211\027\050\030\047\031" +
    "\045\032\044\033\060\040\055\001\001\000\002\001\001" +
    "\000\020\026\213\027\050\030\047\031\045\032\044\033" +
    "\060\040\055\001\001\000\002\001\001\000\030\004\150" +
    "\033\151\040\147\041\143\042\135\044\144\045\137\047" +
    "\215\051\146\055\145\061\152\001\001\000\004\073\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\230\020\231\034\225\035\226\036\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\061\014\234\016\042\025\057\026\043\027\050" +
    "\030\047\031\045\032\044\033\060\040\055\001\001\000" +
    "\004\065\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\015\007\240\001\001\000\006\004\033\013" +
    "\241\001\001\000\006\004\036\017\242\001\001\000\006" +
    "\004\131\023\243\001\001\000\002\001\001\000\024\033" +
    "\151\040\147\041\143\042\135\044\144\045\245\051\146" +
    "\055\145\061\152\001\001\000\030\004\150\033\151\040" +
    "\147\041\143\042\135\044\144\045\137\047\246\051\146" +
    "\055\145\061\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\061" +
    "\014\253\016\042\025\057\026\043\027\050\030\047\031" +
    "\045\032\044\033\060\040\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\260\022\256\001\001\000" +
    "\004\066\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\015\007" +
    "\264\001\001\000\006\004\033\013\265\001\001\000\006" +
    "\004\036\017\266\001\001\000\006\004\131\023\267\001" +
    "\001\000\002\001\001\000\026\033\151\040\147\041\143" +
    "\042\272\044\300\046\277\052\276\056\273\057\275\061" +
    "\302\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\026\314\027\050\030\047\031\045\032" +
    "\044\033\060\040\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\307\033\151\040\147\041\143\042" +
    "\272\044\300\046\306\050\305\052\276\056\273\057\275" +
    "\061\302\001\001\000\002\001\001\000\020\026\303\027" +
    "\050\030\047\031\045\032\044\033\060\040\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\311\001\001\000\032\004\307\033\151\040\147" +
    "\041\143\042\272\044\300\046\306\050\310\052\276\056" +
    "\273\057\275\061\302\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\307" +
    "\033\151\040\147\041\143\042\272\044\300\046\306\050" +
    "\317\052\276\056\273\057\275\061\302\001\001\000\006" +
    "\004\322\054\321\001\001\000\002\001\001\000\004\072" +
    "\323\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\307\033\151\040\147\041\143\042\272\044\300\046\306" +
    "\050\330\052\276\056\273\057\275\061\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\026\333\027\050" +
    "\030\047\031\045\032\044\033\060\040\055\001\001\000" +
    "\002\001\001\000\020\026\335\027\050\030\047\031\045" +
    "\032\044\033\060\040\055\001\001\000\002\001\001\000" +
    "\032\004\307\033\151\040\147\041\143\042\272\044\300" +
    "\046\306\050\337\052\276\056\273\057\275\061\302\001" +
    "\001\000\004\074\340\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\352\033\106\001\001\000" +
    "\002\001\001\000\006\012\354\033\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\357\001\001\000" +
    "\002\001\001\000\004\064\361\001\001\000\006\004\346" +
    "\010\362\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	// Codigo del equipo docente
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

	// Metodos creados por mi
	// Metodo para comprobar si existe un simbolo 
	public void errorSiExisteSimbolo(String id, int linea){ 
		// Recuperamos el ambito y obtenemos la tabla de simbolos
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF tablaSimbolos = scope.getSymbolTable();

		// Comprobamos si la tabla de simbolos contiene el simbolo
		if(tablaSimbolos.containsSymbol(id)){
			semanticErrorManager.semanticFatalError("Simbolo " + id + " en la linea " + linea + " declarado anteriormente, error.");
		}
	}

	// Metodo para comprobar si existe un tipo
	public void errorSiExisteTipo(String id, int linea){ 
		if(scopeManager.containsType(id)){
			semanticErrorManager.semanticFatalError("Simbolo " + id + " en la linea " + linea + " declarado anteriormente, error.");
		}
	}
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentenciaDevolver ::= FRETURN expresion DSENTENCIAS 
            {
              SentenciaDevolver RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	String nombreFuncion = scope.getName(); // Obtenemos el nombre del scope actual
	TypeIF tipoFuncion = scopeManager.searchType(nombreFuncion); // Obtenemos el tipo de la funcion actual

	if(tipoFuncion instanceof TypeFunction){
		// Pasos para la comprobacion del tipo
		String tipoRetornoFuncion = ((TypeFunction)tipoFuncion).getTipoRetorno(); // Obtenemos el tipo de retorno de la funcion actual
		if(!expr.getTipo().getName().equals(tipoRetornoFuncion)){ // Lanzamos error si el tipo no coincide con la sentencia devolver
			semanticErrorManager.semanticFatalError("Error en el tipo del retorno de la linea " + r.getLine());
		}

		// Creacion de la sentencia devolver
		SentenciaDevolver sentenciaD = new SentenciaDevolver();
		RESULT = sentenciaD;

	}else{
		semanticErrorManager.semanticFatalError("Se ha detectado una sentencia devolver fuera de una funcion.");
	}	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevolver",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentenciaEscribir ::= ESCRIBIR PIZQUIERDO parametroEscribir PDERECHO DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parametroEscribir ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroEscribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametroEscribir ::= expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(!(e1.getTipo().equals(scopeManager.searchType("ENTERO")))){
		semanticErrorManager.semanticFatalError("El tipo del parametro pasado a una de las llamadas escribir() no es de tipo entero, error.");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroEscribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametroEscribir ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroEscribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentenciaforFuncion ::= COMIENZOBUCLEPARA IDEN RANGOBUCLEPARA expresion RANGO expresion DELIMFUNC listaSentenciasFuncion NT$10 FINBLOQUESENTENCIAS COMIENZOBUCLEPARA DSENTENCIAS 
            {
              Sentencia RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Sentencia) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaforFuncion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$10 ::= 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

	// Comprobamos que la variable indice esta declarada en las tablas de simbolos abiertos
	if(!scopeManager.containsSymbol(id.getLexema().toUpperCase())){
		semanticErrorManager.semanticFatalError("Variable del bucle para " + id.getLexema().toUpperCase() + " en linea " + id.getLine() + " no esta declarado anteriormente, error.");
	}

	// Comprobamos que el tipo de la variable indice es de tipo entero 
	if(!scopeManager.searchSymbol(id.getLexema().toUpperCase()).getType().equals(scopeManager.searchType("ENTERO"))){
		semanticErrorManager.semanticFatalError("El tipo de la variable del bucle para " + id.getLexema().toUpperCase() + " en linea " + id.getLine() + " no es de tipo entero, error.");
	}

	// Comprobamos que ambas expresiones del rango son del tipo entero
	if(!(e1.getTipo().equals(scopeManager.searchType("ENTERO")) && e2.getTipo().equals(scopeManager.searchType("ENTERO")))){
		semanticErrorManager.semanticFatalError("El tipo de alguna de las expresiones del rango del bucle para en linea " + id.getLine() + " no es de tipo entero, error.");
	}

	// Aunque dentro del bloque de sentencias para contenga una sentencia devuelve, como cabe la posibilidad de que el bucle para no llegue a ejecutarse, debe existir una sentencia del bucle fuera del bloque de sentencias del bucle para. Por lo que dejamos new Sentencia() con la variable contieneDevuelve a false.
	Sentencia sent = new Sentencia();
	RESULT = sent;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentenciafor ::= COMIENZOBUCLEPARA IDEN RANGOBUCLEPARA expresion RANGO expresion DELIMFUNC listaSentencias NT$9 FINBLOQUESENTENCIAS COMIENZOBUCLEPARA DSENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciafor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$9 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

	// Comprobamos que la variable indice esta declarada en las tablas de simbolos abiertos
	if(!scopeManager.containsSymbol(id.getLexema().toUpperCase())){
		semanticErrorManager.semanticFatalError("Variable del bucle para " + id.getLexema().toUpperCase() + " en linea " + id.getLine() + " no esta declarado anteriormente, error.");
	}

	// Comprobamos que el tipo de la variable indice es de tipo entero 
	if(!scopeManager.searchSymbol(id.getLexema().toUpperCase()).getType().equals(scopeManager.searchType("ENTERO"))){
		semanticErrorManager.semanticFatalError("El tipo de la variable del bucle para " + id.getLexema().toUpperCase() + " en linea " + id.getLine() + " no es de tipo entero, error.");
	}

	// Comprobamos que ambas expresiones del rango son del tipo entero
	if(!(e1.getTipo().equals(scopeManager.searchType("ENTERO")) && e2.getTipo().equals(scopeManager.searchType("ENTERO")))){
		semanticErrorManager.semanticFatalError("El tipo de alguna de las expresiones del rango del bucle para en linea " + id.getLine() + " no es de tipo entero, error.");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // rellenoif ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rellenoif",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // rellenoif ::= ALTERNATIVASI DELIMFUNC listaSentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rellenoif",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // rellenoifFuncion ::= epsilon 
            {
              ListaSentenciasFuncion RESULT =null;
		
	RESULT = new ListaSentenciasFuncion();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rellenoifFuncion",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // rellenoifFuncion ::= ALTERNATIVASI DELIMFUNC listaSentenciasFuncion 
            {
              ListaSentenciasFuncion RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaSentenciasFuncion ls = (ListaSentenciasFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ls.setEsRellenoIfFuncion(true);
	RESULT = ls;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rellenoifFuncion",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentenciaifFuncion ::= COMIENZOSI expresion STARTIF DELIMFUNC listaSentenciasFuncion rellenoifFuncion NT$8 FINBLOQUESENTENCIAS COMIENZOSI DSENTENCIAS 
            {
              Sentencia RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Sentencia) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int listaSentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listaSentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ListaSentenciasFuncion listaSent = (ListaSentenciasFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listaRellenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listaRellenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ListaSentenciasFuncion listaRelleno = (ListaSentenciasFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaifFuncion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$8 ::= 
            {
              Sentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaSentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaSentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaSentenciasFuncion listaSent = (ListaSentenciasFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaRellenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaRellenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaSentenciasFuncion listaRelleno = (ListaSentenciasFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

	if(!ex.getTipo().getName().equals("BOOLEANO")){
		semanticErrorManager.semanticFatalError("La expresion que determina la condicion en la sentencia if de la linea "+ c.getLine() + " no se trata de una expresion logica.");
	}
	
	Sentencia sent = new Sentencia();
	// Solo cuento que las sentencias if tienen una sentencia devolver si tanto en si como en sino se incluye la sentencia devolver
	if(listaRelleno.isEsRellenoIfFuncion() && listaSent.isContieneSentenciaDevolver() && listaRelleno.isContieneSentenciaDevolver()){
		sent.setContieneSentenciaDevolver(true);
	}
	RESULT = sent;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentenciaif ::= COMIENZOSI expresion STARTIF DELIMFUNC listaSentencias rellenoif NT$7 FINBLOQUESENTENCIAS COMIENZOSI DSENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaif",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$7 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

	if(!ex.getTipo().getName().equals("BOOLEANO")){
		semanticErrorManager.semanticFatalError("La expresion que determina la condicion en la sentencia if de la linea "+ c.getLine() + " no se trata de una expresion logica.");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // listaSentenciasFuncion ::= epsilon 
            {
              ListaSentenciasFuncion RESULT =null;
		
	RESULT = new ListaSentenciasFuncion();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasFuncion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // listaSentenciasFuncion ::= sentenciaFuncion listaSentenciasFuncion 
            {
              ListaSentenciasFuncion RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia sent = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaSentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaSentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaSentenciasFuncion listaSent = (ListaSentenciasFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(sent.isContieneSentenciaDevolver()){
		listaSent.setContieneSentenciaDevolver(true);
	}
	RESULT = listaSent;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasFuncion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentenciaFuncion ::= sentenciaDevolver 
            {
              Sentencia RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaDevolver st = (SentenciaDevolver)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Sentencia s = new Sentencia();
	s.setContieneSentenciaDevolver(true);
	RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentenciaFuncion ::= sentenciallamadafuncion 
            {
              Sentencia RESULT =null;
		
	RESULT = new Sentencia();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentenciaFuncion ::= sentenciaEscribir 
            {
              Sentencia RESULT =null;
		
	RESULT = new Sentencia();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentenciaFuncion ::= sentenciaforFuncion 
            {
              Sentencia RESULT =null;
		int sForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sForright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sFor = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = sFor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentenciaFuncion ::= sentenciaifFuncion 
            {
              Sentencia RESULT =null;
		int sIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sIf = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = sIf;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentenciaFuncion ::= sentenciadeasignacion 
            {
              Sentencia RESULT =null;
		 //TODO todas las sentencias excepto los aspectos de devolver que ya estan hechos
	RESULT = new Sentencia();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // listaSentencias ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // listaSentencias ::= sentencia listaSentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencia ::= sentenciallamadafuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia ::= sentenciaEscribir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia ::= sentenciafor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia ::= sentenciaif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia ::= sentenciadeasignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentenciallamadafuncion ::= llamadafuncion DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciallamadafuncion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // llamadafuncion ::= IDEN PIZQUIERDO parametrofuncionoproc PDERECHO 
            {
              Llamadafuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Listavariables lv = (Listavariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	// Comprobamos si el identificador esta previamente incluido en la tabla de simbolos como SymbolProcedure o SymbolFunction
	if(!scopeManager.containsSymbol(id.getLexema().toUpperCase()) || !(   scopeManager.searchSymbol(id.getLexema().toUpperCase()) instanceof SymbolProcedure || scopeManager.searchSymbol(id.getLexema().toUpperCase()) instanceof SymbolFunction  )){
		semanticErrorManager.semanticFatalError("La funcion "+ id.getLexema().toUpperCase()+ " no esta contenido en la tabla de simbolos como funcion o procedimiento."); 
	}

	Llamadafuncion lf = new Llamadafuncion(id.getLexema().toUpperCase());
	lf.setTipo((scopeManager.searchSymbol(id.getLexema().toUpperCase())).getType()); // Obtenemos el tipo del simbolo y establecemos al lf

	//Variables para la comprobacion de parametros
	ArrayList<Selectorvalororeferencia> listaParametrosEsperados = null;
	ArrayList<Selectorvalororeferencia> listaParametrosPasados = lv.getListaV();
		
	// Si es una funcion
	if(scopeManager.searchSymbol(id.getLexema().toUpperCase()) instanceof SymbolFunction){
		//establecemos el tipo de retorno como tipo
		SymbolFunction sf = (SymbolFunction)scopeManager.searchSymbol(id.getLexema().toUpperCase());
		lf.setTipo(scopeManager.searchType(sf.getTipoRetorno()));

		// Obtenemos la lista de parametros esperados de la funcion
		listaParametrosEsperados = sf.getListaParametros();
	}

	// Si es un procedimiento
	if(scopeManager.searchSymbol(id.getLexema().toUpperCase()) instanceof SymbolProcedure){
		// Obtenemos la lista de parametros esperados del procedimiento
		SymbolProcedure sp = (SymbolProcedure)scopeManager.searchSymbol(id.getLexema().toUpperCase());
		listaParametrosEsperados = sp.getListaParametros();
	}

	// Comparamos ambas listas de parametros
	if(listaParametrosEsperados.size() != listaParametrosPasados.size()){ // Comprobacion en numero
		semanticErrorManager.semanticFatalError("El numero de parametros de "+ id.getLexema().toUpperCase()+ " no corresponde a lo esperado."); 
	}
	for (int x = 0; x < listaParametrosEsperados.size(); x++){ // Comprobacion en tipo y orden
		Selectorvalororeferencia parametroEsperado = listaParametrosEsperados.get(x);
		Selectorvalororeferencia parametroPasado = listaParametrosPasados.get(x);

		if(!parametroEsperado.getTipo().getName().equals(parametroPasado.getTipo().getName())){
			semanticErrorManager.semanticFatalError("Alguno o varios de los tipos u orden de los parametros de "+ id.getLexema().toUpperCase()+ " no corresponde a lo esperado.");
		}
	}

	RESULT = lf;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadafuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametrofuncionoproc ::= listavariables 
            {
              Listavariables RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Listavariables lv = (Listavariables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = lv;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrofuncionoproc",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametroasignacion ::= expresion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroasignacion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentenciadeasignacion ::= parteizquierdaasignacion ASIGNACION parametroasignacion DSENTENCIAS 
            {
              Object RESULT =null;
		int pizqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pizqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Parteizquierdaasignacion pizq = (Parteizquierdaasignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	// La parte izquierda tiene que ser instancia de SymbolVariable o SymbolParameter, y tiene que ser una instancia de tipo simple
	if((scopeManager.searchSymbol(pizq.getId())instanceof SymbolVariable || scopeManager.searchSymbol(pizq.getId())instanceof SymbolParameter) && (pizq.getTipo() instanceof TypeSimple)){
		// El tipo de pizq tiene que coincidir con el tipo de expr
		if(pizq.getTipo().getName().equals(expr.getTipo().getName())){
			semanticErrorManager.semanticDebug("El tipo de " + pizq.getId()+ " y " + expr.getId() + " coinciden, asignacion OK.");
		}else{
			semanticErrorManager.semanticFatalError("El tipo de " + pizq.getId()+ " y " + expr.getId() + " no coinciden.");
		}
	}else{
		semanticErrorManager.semanticFatalError(pizq.getId()+ " no puede estar en la parte izquierda de una sentencia de asignacion porque no es o SymbolVariable o SymbolParameter o del tipo TypeSimple.");
	}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciadeasignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parteizquierdaasignacion ::= miembrovector 
            {
              Parteizquierdaasignacion RESULT =null;
		int mvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Miembrovector mv = (Miembrovector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Parteizquierdaasignacion pizq = new Parteizquierdaasignacion(mv.getId());
	pizq.setTipo(mv.getTipo());
	RESULT = pizq;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteizquierdaasignacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parteizquierdaasignacion ::= IDEN 
            {
              Parteizquierdaasignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	// Comprobamos si el identificador esta previametne incluido en la tabla de simbolos
	if(scopeManager.containsSymbol(id.getLexema().toUpperCase())){
		Parteizquierdaasignacion pizq = new Parteizquierdaasignacion(id.getLexema().toUpperCase());
		pizq.setTipo((scopeManager.searchSymbol(id.getLexema().toUpperCase())).getType()); // Obtenemos el tipo del simbolo y establecemos al pizq
		RESULT = pizq;
	} else {
		semanticErrorManager.semanticFatalError("El simbolo "+ id.getLexema().toUpperCase()+ " no esta contenido en la tabla de simbolos."); 
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteizquierdaasignacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // miembrovector ::= IDEN CIZQUIERDO valorango CDERECHO 
            {
              Miembrovector RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Valorango vr = (Valorango)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 //TODO aqui deberia de comparar que el numero de valorango entre dentro de los limites del rango del tipo de vector
	// Comprobamos si el miembrovector esta previamente incluido en la tabla de simbolos
	if(!scopeManager.containsSymbol(id.getLexema().toUpperCase())){
		semanticErrorManager.semanticFatalError("El simbolo "+ id.getLexema().toUpperCase()+ " no esta contenido en la tabla de simbolos."); 
	}

	// Obtenemos el tipo del vector
	TypeIF tipoVector = (scopeManager.searchSymbol(id.getLexema().toUpperCase())).getType();

	// En el caso de que valorango sea un numero, comprobamos que valorango este dentro del rango inferior y superior del vector
	if(vr.isNum()){
		if(tipoVector instanceof TypeArray){
			int indiceAcceder = vr.getNum();
			int rangoInferior = ((TypeArray)tipoVector).getRangoInferior();
			int rangoSuperior = ((TypeArray)tipoVector).getRangoSuperior();
			
			if(!(indiceAcceder <= rangoSuperior && indiceAcceder >= rangoInferior)){
				semanticErrorManager.semanticFatalError("El indice al que se quiere acceder en el vector "+ id.getLexema().toUpperCase()+ " en la linea "+ id.getLine() + " no esta contenido dentro de los limites del rango del tipo del vector.");
			}
		}else{
			semanticErrorManager.semanticFatalError("El simbolo "+ id.getLexema().toUpperCase()+ " no es una instancia de TypeArray.");
		}
	}

	// Creamos el miembro del vector y establecemos su tipo
	Miembrovector mv = new Miembrovector(id.getLexema().toUpperCase());
	if(tipoVector instanceof TypeArray){
		mv.setTipo(((TypeArray)tipoVector).getTipo().getTipo()); // Obtenemos el tipo de los miembros del vector y establecemos al mv
		RESULT = mv;
	}else{
		semanticErrorManager.semanticFatalError("El simbolo "+ id.getLexema().toUpperCase()+ " no es una instancia de TypeArray.");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("miembrovector",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresionlvl5 ::= CIZQUIERDO expresion CDERECHO 
            {
              Expresion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = expr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl5",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresionlvl5 ::= PIZQUIERDO expresion PDERECHO 
            {
              Expresion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = expr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl5",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresionlvl4 ::= expresionlvl5 
            {
              Expresion RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl4",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresionlvl4 ::= NOLOGICO expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	// Comprobamos que los tipos no sean null para no tener un null pointer exception
	if(e1.getTipo() != null){
		if(e1.getTipo().getName().equals("BOOLEANO")){
			Expresion expr = new Expresion(); // Creamos la expresion
			expr.setTipo(scopeManager.searchType("BOOLEANO"));// Establecemos el tipo
			RESULT = expr; // Propagamos la expresion
		} else {
			semanticErrorManager.semanticFatalError("El tipo de la expresion " + e1.getId() + " no es un booleano.");
		}
	}else{
		semanticErrorManager.semanticFatalError("El tipo de la expresion " + e1.getId() + " es null.");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl4",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresionlvl3 ::= expresionlvl4 
            {
              Expresion RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresionlvl3 ::= expresion PRODUCTO expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	// Comprobamos que los tipos no sean null para no tener un null pointer exception
	if(e1.getTipo() != null && e2.getTipo() != null){
		if(e1.getTipo().getName().equals("ENTERO") && e2.getTipo().getName().equals("ENTERO")){
			Expresion expr = new Expresion(); // Creamos la expresion
			expr.setTipo(scopeManager.searchType("ENTERO"));// Establecemos el tipo
			RESULT = expr; // Propagamos la expresion
		} else {
			semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " * " + e2.getId() + " no es un entero.");
		}
	}else{
		semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " * " + e2.getId() + " es null.");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresionlvl3 ::= expresion YLOGICA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	// Comprobamos que los tipos no sean null para no tener un null pointer exception
	if(e1.getTipo() != null && e2.getTipo() != null){
		if(e1.getTipo().getName().equals("BOOLEANO") && e2.getTipo().getName().equals("BOOLEANO")){
			Expresion expr = new Expresion(); // Creamos la expresion
			expr.setTipo(scopeManager.searchType("BOOLEANO"));// Establecemos el tipo
			RESULT = expr; // Propagamos la expresion
		} else {
			semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " y " + e2.getId() + " no es un booleano.");
		}
	}else{
		semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " y " + e2.getId() + " es null.");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresionlvl2 ::= expresionlvl3 
            {
              Expresion RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresionlvl2 ::= expresion SUMA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	// Comprobamos que los tipos no sean null para no tener un null pointer exception
	if(e1.getTipo() != null && e2.getTipo() != null){
		if(e1.getTipo().getName().equals("ENTERO") && e2.getTipo().getName().equals("ENTERO")){
			Expresion expr = new Expresion(); // Creamos la expresion
			expr.setTipo(scopeManager.searchType("ENTERO"));// Establecemos el tipo
			RESULT = expr; // Propagamos la expresion
		} else {
			semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " + " + e2.getId() + " no es un entero.");
		}
	}else{
		semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " + " + e2.getId() + " es null.");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresionlvl2 
            {
              Expresion RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= NUM 
            {
              Expresion RESULT =null;
		
	Expresion expr = new Expresion(); // Creamos la expresion
	expr.setTipo(scopeManager.searchType("ENTERO"));// Establecemos el tipo
	RESULT = expr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= miembrovector 
            {
              Expresion RESULT =null;
		int mvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Miembrovector mv = (Miembrovector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Expresion expr = new Expresion(); // Creamos la expresion
	expr.setTipo(mv.getTipo());// Establecemos el tipo
	RESULT = expr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= FALSO 
            {
              Expresion RESULT =null;
		
	Expresion expr = new Expresion(); // Creamos la expresion
	expr.setTipo(scopeManager.searchType("BOOLEANO"));// Establecemos el tipo
	RESULT = expr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= CIERTO 
            {
              Expresion RESULT =null;
		
	Expresion expr = new Expresion(); // Creamos la expresion
	expr.setTipo(scopeManager.searchType("BOOLEANO"));// Establecemos el tipo
	RESULT = expr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= llamadafuncion 
            {
              Expresion RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Llamadafuncion lf = (Llamadafuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Expresion expr = new Expresion(); // Creamos la expresion
	expr.setTipo(lf.getTipo());// Establecemos el tipo
	RESULT = expr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= IDEN 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Expresion expr = new Expresion(id.getLexema().toUpperCase()); // Creamos la expresion
	if(scopeManager.containsSymbol(expr.getId())){ // Si existe ya en la tabla de simbolos
		expr.setTipo(scopeManager.searchSymbol(expr.getId()).getType());// Establecemos el tipo
		semanticErrorManager.semanticDebug(expr);
	}
	RESULT = expr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion IGUALDAD expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	// Comprobamos que los tipos no sean null para no tener un null pointer exception
	if(e1.getTipo() != null && e2.getTipo() != null){
		if(e1.getTipo().getName().equals("ENTERO") && e2.getTipo().getName().equals("ENTERO")){
			Expresion expr = new Expresion(); // Creamos la expresion
			expr.setTipo(scopeManager.searchType("BOOLEANO"));// Establecemos el tipo
			RESULT = expr; // Propagamos la expresion
		} else {
			semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " == " + e2.getId() + " no es un entero.");
		}
	}else{
		semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " == " + e2.getId() + " es null.");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion MENORQUE expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	// Comprobamos que los tipos no sean null para no tener un null pointer exception
	if(e1.getTipo() != null && e2.getTipo() != null){
		if(e1.getTipo().getName().equals("ENTERO") && e2.getTipo().getName().equals("ENTERO")){
			Expresion expr = new Expresion(); // Creamos la expresion
			expr.setTipo(scopeManager.searchType("BOOLEANO"));// Establecemos el tipo
			RESULT = expr; // Propagamos la expresion
		} else {
			semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " < " + e2.getId() + " no es un entero.");
		}
	}else{
		semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " < " + e2.getId() + " es null.");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // defprincipal ::= COMIENZOPROGRAMA IDEN NT$6 DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO listaSentencias FINBLOQUESENTENCIAS FINPROGRAMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		
	// Cerramos el ambito actual (current scope)
	scopeManager.closeScope();
	semanticErrorManager.semanticDebug("Se ha cerrado el ambito actual.");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defprincipal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$6 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;


	// Creamos el ambito global con el nombre del programa principal
	scopeManager.openScope(id.getLexema().toUpperCase());
	ScopeIF scope = scopeManager.getCurrentScope();
	// Comprobaciones para ver si el ambito se ha creado correctamente
	semanticErrorManager.semanticDebug("El nombre del nuevo ambito es: " + scope.getName());
	semanticErrorManager.semanticDebug("El nivel del nuevo ambito es: " + scope.getLevel()); // El nivel esperado es 0
	
	// Obtencion de la tabla de tipos y simbolos
	SymbolTableIF symbolTable = scope.getSymbolTable(); //BORRAR No estoy segura para que lo recupero si no se usa
	TypeTableIF typeTable = scope.getTypeTable();
	
	// Introducimos los tipos entero y booleano que describe el enunciado
	TypeSimple tsEntero = new TypeSimple(scope, "ENTERO");
	typeTable.addType("ENTERO",tsEntero);
	TypeSimple tsBooleano = new TypeSimple(scope, "BOOLEANO");
	typeTable.addType("BOOLEANO",tsBooleano);
	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // seccionsubprograma ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionsubprograma",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // seccionsubprograma ::= COMIENZOSUBPROGRAMAS defsubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionsubprograma",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // defsubprograma ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defsubprograma",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // defsubprograma ::= selectorpof defsubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defsubprograma",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // selectorpof ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectorpof",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // selectorpof ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectorpof",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion ::= DECLAREFUNCION IDEN PIZQUIERDO defvariables PDERECHO DELIMFUNC tiporetornofuncion NT$4 DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO sentenciaFuncion listaSentenciasFuncion NT$5 FINBLOQUESENTENCIAS DSENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int listaVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int listaVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		Defvariables listaVar = (Defvariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Tipovector tipo = (Tipovector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int sentFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sentFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Sentencia sentFun = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaSentFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listaSentFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ListaSentenciasFuncion listaSentFun = (ListaSentenciasFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
	// Cerramos el ambito actual (current scope)
	scopeManager.closeScope();
	semanticErrorManager.semanticDebug("Se ha cerrado el ambito actual.");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int listaVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int listaVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Defvariables listaVar = (Defvariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipovector tipo = (Tipovector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int sentFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia sentFun = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaSentFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaSentFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaSentenciasFuncion listaSentFun = (ListaSentenciasFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

	// Comprobar si hay alguna sentencia de devolver en las sentencias de esta funcion
	if(!(sentFun.isContieneSentenciaDevolver() || listaSentFun.isContieneSentenciaDevolver())){
		semanticErrorManager.semanticFatalError("La funcion " + id.getLexema().toUpperCase() + " no tiene sentencia de devolver o existe una ruta de ejecucion que no alcanza una sentencia devolver, error.");
	}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listaVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listaVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Defvariables listaVar = (Defvariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipovector tipo = (Tipovector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

	// Obtenemos el ambito, la tabla de tipos y la tabla de simbolos
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF symbolTable = scope.getSymbolTable();
	TypeTableIF typeTable = scope.getTypeTable();

	// Invocamos los metodos que lanzan un error si el id esta anteriormente declarado bien en la tabla de simbolos o bien en la tabla de tipos
	errorSiExisteSimbolo(id.getLexema().toUpperCase(), id.getLine());
	errorSiExisteTipo(id.getLexema().toUpperCase(), id.getLine());
	
	// Creamos el tipo y el simbolo de la funcion
	TypeFunction tf = new TypeFunction(scope, id.getLexema().toUpperCase(), tipo.getNombre_tipo(), listaVar.getListaVariablesConTipo());
	typeTable.addType(id.getLexema().toUpperCase(), tf);
	SymbolFunction sf = new SymbolFunction(scope, id.getLexema().toUpperCase(), tf, tipo.getNombre_tipo(), listaVar.getListaVariablesConTipo());
	symbolTable.addSymbol(id.getLexema().toUpperCase(), sf);
	
	// Creamos el ambito con el nombre de la funcion y emitimos el mensaje de comprobación
	scopeManager.openScope(id.getLexema().toUpperCase());
	scope = scopeManager.getCurrentScope();
	semanticErrorManager.semanticDebug("El nombre del nuevo ambito es: " + scope.getName() + " con el nivel: " + scope.getLevel());
	

	// listVar se trata de una clase que contiene un ArrayList de variables que le pasamos a la funcion. Cogeremos cada variable uno a uno e incluiremos en la tabla de símbolos.
	if(listaVar != null){
		// Obtenemos la tabla de simbolos
		symbolTable = scope.getSymbolTable();

		// Primero recuperamos el ArrayList
		ArrayList<Selectorvalororeferencia> listaAux = listaVar.getListaVariablesConTipo();

		// Recorremos la lista e introducimos las variables en la tabla de simbolos
		for(int x = 0; x < listaAux.size(); x++){
			Selectorvalororeferencia variable = listaAux.get(x);
			// Comprobamos si la tabla de simbolos contiene el simbolo
			errorSiExisteSimbolo(variable.getId(), 0); //TODO la linea no esta definida aqui

			// Comprobacion de que no se pasa por valor ningun vector completo, esta prohibido
			if(variable.isPorValor() && variable.getTipo() instanceof TypeArray){
				semanticErrorManager.semanticFatalError("No se puede pasar por valor el vector completo " + variable.getId());
			}

			// Crear e incluir el simbolo al symbolTable
			SymbolParameter symbol = new SymbolParameter(scope, variable.getId(), variable.getTipo());
			symbolTable.addSymbol(symbol);
		}
	}
	
	// Comprobar que exista el tipo de retorno. Para ello, si no lo contiene, lanzaremos un error.
	if(!scopeManager.containsType(tipo.getNombre_tipo())){
		semanticErrorManager.semanticFatalError("Tipo " + tipo.getNombre_tipo() + " de retorno de funcion no existe, error.");
	} //es posible que no sea necesario hacer esta comprobacion, porque ya tenemos el tipo en su sitio y cualquier fallo lo detectaria la sintaxis


              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // procedimiento ::= COMIENZOPROCEDIMIENTO IDEN PIZQUIERDO defvariables NT$3 PDERECHO DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO sentencia listaSentencias FINBLOQUESENTENCIAS DSENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int listaVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int listaVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Defvariables listaVar = (Defvariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		
	// Cerramos el ambito actual (current scope)
	scopeManager.closeScope();
	semanticErrorManager.semanticDebug("Se ha cerrado el ambito actual.");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Defvariables listaVar = (Defvariables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

	// Obtenemos el ambito, la tabla de tipos y la tabla de simbolos
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF symbolTable = scope.getSymbolTable();
	TypeTableIF typeTable = scope.getTypeTable();

	// Invocamos los metodos que lanzan un error si el id esta anteriormente declarado bien en la tabla de simbolos o bien en la tabla de tipos
	errorSiExisteSimbolo(id.getLexema().toUpperCase(), id.getLine());
	errorSiExisteTipo(id.getLexema().toUpperCase(), id.getLine());
	
	// Creamos el tipo y el simbolo del procedimiento
	TypeProcedure tp = new TypeProcedure(scope, id.getLexema().toUpperCase());
	tp.setListaParametros(listaVar.getListaVariablesConTipo());
	typeTable.addType(id.getLexema().toUpperCase(), tp);
	SymbolProcedure sp = new SymbolProcedure(scope, id.getLexema().toUpperCase(), tp);
	sp.setListaParametros(listaVar.getListaVariablesConTipo());
	symbolTable.addSymbol(id.getLexema().toUpperCase(), sp);

	// Creamos el ambito con el nombre del procedimiento y emitimos el mensaje de comprobación
	scopeManager.openScope(id.getLexema().toUpperCase());
	scope = scopeManager.getCurrentScope();
	semanticErrorManager.semanticDebug("El nombre del nuevo ambito es: " + scope.getName() + " con el nivel: " + scope.getLevel());	
	

	// listaVar se trata de una clase que contiene un Arraylist<Selectorvalororeferencia> que le pasamos al procedimiento. Cogeremos cada variable uno a uno e incluiremos en la tabla de símbolos.
	if(listaVar != null){
		// Obtenemos la tabla de simbolos
		symbolTable = scope.getSymbolTable();

		// Primero recuperamos el ArrayList
		ArrayList<Selectorvalororeferencia> listaAux = listaVar.getListaVariablesConTipo();

		// Recorremos la lista e introducimos las variables en la tabla de simbolos
		for(int x = 0; x < listaAux.size(); x++){
			Selectorvalororeferencia variable = listaAux.get(x);
			errorSiExisteSimbolo(variable.getId(), 0); //TODO la linea no esta definida aqui

			// Comprobacion de que no se pasa por valor ningun vector completo, esta prohibido
			if(variable.isPorValor() && variable.getTipo() instanceof TypeArray){
				semanticErrorManager.semanticFatalError("No se puede pasar por valor el vector completo " + variable.getId());
			}

			// Crear e incluir el simbolo al symbolTable
			SymbolParameter symbol = new SymbolParameter(scope, variable.getId(), variable.getTipo());
			symbolTable.addSymbol(symbol);
		}
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tiporetornofuncion ::= tipovector 
            {
              Tipovector RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipovector t = (Tipovector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = t;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiporetornofuncion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // puntoycomaopcional ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puntoycomaopcional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // puntoycomaopcional ::= DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puntoycomaopcional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // seccionvariables ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionvariables",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // seccionvariables ::= DECLVARIABLES defvariables 
            {
              Object RESULT =null;
		int listVariablesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listVariablesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Defvariables listVariables = (Defvariables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	// Obtenemos el ambito y la tabla de simbolos
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF symbolTable = scope.getSymbolTable();

	semanticErrorManager.semanticDebug("Variables creadas con su correspondiente tipo: "+listVariables.toString());

	ArrayList<Selectorvalororeferencia> listaAux = listVariables.getListaVariablesConTipo();

	// vamos recorriendo cada elemento de la lista de Selectorvalororeferencia
	for(int x = 0; x < listaAux.size(); x++){
		Selectorvalororeferencia variable = listaAux.get(x); // obtenemos cada Selectorvalororeferencia
		if(variable.getId() == null){ // Si es null, no es un IDEN por lo que lanzamos error
			semanticErrorManager.semanticFatalError("Se ha detectado una notacion de declaracion de variable no autorizada. Asegurar que todas las variables sean declaradas con identificadores.");
		}else{ // Si no es null, es un IDEN
			if(variable.isPorValor()){ //comprobamos que es por valor				
				errorSiExisteSimbolo(variable.getId(), 0); //TODO el numero de linea no esta definida aqui
				SymbolVariable symbol = new SymbolVariable(scope, variable.getId(), variable.getTipo());
				symbolTable.addSymbol(symbol);
			}else{ // si no es por valor, lanzamos error
				semanticErrorManager.semanticFatalError("No se puede declarar la variable " + variable.getId() + ", es por referencia.");
			}
		}
	}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionvariables",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listavariables ::= epsilon 
            {
              Listavariables RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavariables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listavariables ::= selectorvalororeferencia 
            {
              Listavariables RESULT =null;
		int selectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int selectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Selectorvalororeferencia selector = (Selectorvalororeferencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new Listavariables(selector);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavariables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listavariables ::= selectorvalororeferencia DIDENTIFICADORES listavariables 
            {
              Listavariables RESULT =null;
		int selectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int selectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Selectorvalororeferencia selector = (Selectorvalororeferencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaVright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Listavariables listaV = (Listavariables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	listaV.addElemento(selector);
	RESULT = listaV; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavariables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // defvariables ::= epsilon 
            {
              Defvariables RESULT =null;
		
	RESULT = new Defvariables();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defvariables",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // defvariables ::= listavariables DELIMFUNC tipovariable puntoycomaopcional defvariables 
            {
              Defvariables RESULT =null;
		int listVariablesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listVariablesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Listavariables listVariables = (Listavariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipovariable tipo = (Tipovariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listVariableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listVariableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Defvariables listVariable = (Defvariables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	// Añado las variables a defvariables y devuelvo defvariables
	if(listVariable == null){ // Si la lista esta vacia, creamos nueva
		RESULT = new Defvariables(tipo.getTipo(), (ArrayList<Selectorvalororeferencia>)(listVariables.getListaV())); 
	} else { // Si la lista contiene elementos, añadimos elementos
		listVariable.putParTipoVariable(tipo.getTipo(), (ArrayList<Selectorvalororeferencia>)(listVariables.getListaV()));
		RESULT = listVariable;
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defvariables",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // selectorvalororeferencia ::= expresion 
            {
              Selectorvalororeferencia RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Selectorvalororeferencia svor = new Selectorvalororeferencia(ex.getId(), true);
	svor.setTipo(ex.getTipo());
	RESULT = svor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectorvalororeferencia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // selectorvalororeferencia ::= PARAMETROVALOR IDEN 
            {
              Selectorvalororeferencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new Selectorvalororeferencia(id.getLexema().toUpperCase(), false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectorvalororeferencia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipovariable ::= IDEN 
            {
              Tipovariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	// Recuperamos el ambito
	ScopeIF scope = scopeManager.getCurrentScope();

	// Comprobamos si la tabla de tipos contiene el tipo.
	if(scopeManager.containsType(id.getLexema().toUpperCase())){ //Si lo contiene, creamos el no terminal tipovariable para seguir adelante
		RESULT = new Tipovariable(scopeManager.searchType(id.getLexema().toUpperCase()), id.getLexema().toUpperCase());
	} else { // Si no lo contiene, lanzamos error
		semanticErrorManager.semanticFatalError("Tipo " + id.getLexema().toUpperCase() + " en linea " + id.getLine() + " no esta incluido en la tabla de tipos anteriormente, error.");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovariable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipovariable ::= ENTERO 
            {
              Tipovariable RESULT =null;
		
	RESULT = new Tipovariable(scopeManager.searchType("ENTERO"), "ENTERO");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovariable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipovariable ::= BOOLEANO 
            {
              Tipovariable RESULT =null;
		
	RESULT = new Tipovariable(scopeManager.searchType("BOOLEANO"), "BOOLEANO");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovariable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // secciontipos ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secciontipos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // secciontipos ::= COMIENZODECLTIPOS deftipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secciontipos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valorango ::= miembrovector 
            {
              Valorango RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Miembrovector m = (Miembrovector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	// No comprobamos que el simbolo este incluido en la tabla de simbolos porque esto ya se hace en la regla de miembrovector
	// Comprobamos que el valor almacenado en este vector (miembrovector) sea entero, ya que valorango tiene que ser un entero
	TypeIF tipoVector = scopeManager.searchSymbol(m.getId()).getType();
	if(tipoVector instanceof TypeArray){
		if(!((TypeArray)tipoVector).getTipo().getTipo().equals(scopeManager.searchType("ENTERO"))){ // Si no es de tipo entero, emitimos un error
			semanticErrorManager.semanticFatalError("El tipo del miembro del vector que ejerce de rango en otro miembro de un vector (ejemplo v1[v2[1]]) no corresponde a un entero.");
		}
	}else{
		semanticErrorManager.semanticFatalError("El tipo del miembro del vector no corresponde a TypeArray.");
	}

	RESULT = new Valorango(m.getId(), false, true);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorango",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valorango ::= IDEN 
            {
              Valorango RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	// Comprobamos que el simbolo este incluido en la tabla de simbolos
	if(!scopeManager.containsSymbol(id.getLexema().toUpperCase())){
		semanticErrorManager.semanticFatalError("El simbolo "+id.getLexema().toUpperCase()+" en linea " + id.getLine() +" no esta contenido en la tabla de simbolos."); 
	}
	
	// Comprobamos que el simbolo sea un entero
	SymbolIF symbol = scopeManager.searchSymbol(id.getLexema().toUpperCase()); // Obtenemos el simbolo
	if(!symbol.getType().equals(scopeManager.searchType("ENTERO"))){ //El simbolo tiene que ser entero
		semanticErrorManager.semanticFatalError("El simbolo "+id.getLexema().toUpperCase() + " en linea " + id.getLine() +" no corresponde a un entero."); 
	}
	
	RESULT = new Valorango(id.getLexema().toUpperCase(), true, false);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorango",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valorango ::= NUM 
            {
              Valorango RESULT =null;
		int valor_numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor_numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token valor_num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new Valorango(Integer.parseInt(valor_num.getLexema().toUpperCase()));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorango",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipovector ::= ENTERO 
            {
              Tipovector RESULT =null;
		
	RESULT = new Tipovector(scopeManager.searchType("ENTERO"), "ENTERO");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovector",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipovector ::= BOOLEANO 
            {
              Tipovector RESULT =null;
		
	RESULT = new Tipovector(scopeManager.searchType("BOOLEANO"), "BOOLEANO");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovector",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // deftipos ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("deftipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // deftipos ::= IDEN ASIGNACION DECLVECTOR CIZQUIERDO valorango RANGO valorango CDERECHO ASIGNACIONVECTOR tipovector DSENTENCIAS NT$2 deftipos 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int rangoInferiorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int rangoInferiorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Valorango rangoInferior = (Valorango)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int rangoSuperiorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangoSuperiorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Valorango rangoSuperior = (Valorango)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tipovleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipovright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipovector tipov = (Tipovector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("deftipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangoInferiorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangoInferiorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Valorango rangoInferior = (Valorango)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rangoSuperiorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rangoSuperiorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Valorango rangoSuperior = (Valorango)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipovleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipovright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipovector tipov = (Tipovector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

	// Recuperamos el ambito y obtenemos la tabla de tipos
	ScopeIF scope = scopeManager.getCurrentScope();
	TypeTableIF tablaTipos = scope.getTypeTable();

	// Comprobamos si el tipo estaba declarado anteriormente, para emitir error si es asi.
	if(scopeManager.containsType(id.getLexema().toUpperCase())){ 
		semanticErrorManager.semanticFatalError("Tipo " + id.getLexema().toUpperCase() + " en linea " + id.getLine() + " incluido en la tabla de tipos anteriormente, error.");
	} else { // Si el tipo no estaba declarado anteriormente
		
		// Comprobamos que tanto el rango inferior como el rango superior sean constantes y obtenemos sus valores.

		// Para ello, primero declaramos dos enteros auxiliares
		int numInferior = 0;
		int numSuperior = 0;

		// Comprobación para el rango inferior
		if(rangoInferior.isNum()){ // Si es un numero constante, cogemos directamente su valor
			numInferior = rangoInferior.getNum();
		}else if (rangoInferior.isIden()){ // Si es un identificador
			SymbolIF symbol = scopeManager.searchSymbol(rangoInferior.getId()); // Obtenemos el simbolo
			if(symbol instanceof SymbolConstant){ //El simbolo tiene que ser constante
				numInferior = ((SymbolConstant)symbol).getNum_value(); // Desde la propia tabla de simbolos obtenemos el valor numerico de este simbolo
			}else {
				semanticErrorManager.semanticFatalError("El simbolo "+rangoInferior.getId()+" no corresponde a una constante."); 
			}
		}else if (rangoInferior.isMiembrovector()){ // Si es un miembro de vector, no puede ser utilizado en la definicion de tipos
			semanticErrorManager.semanticFatalError("El simbolo "+rangoInferior.getId()+" no corresponde a una constante de tipo entero."); 
		}

		// Comprobacion para el rango superior
		if(rangoSuperior.isNum()){ // Si es un numero constante, cogemos directamente su valor
			numSuperior = rangoSuperior.getNum();
		}else if (rangoSuperior.isIden()){ // Si es un identificador
			// Miramos si la tabla de simbolos contiene el simbolo, nos esperamos que lo haga. 
			if(scopeManager.containsSymbol(rangoSuperior.getId())){
				SymbolIF symbol = scopeManager.searchSymbol(rangoSuperior.getId()); // Obtenemos el simbolo
				if(symbol instanceof SymbolConstant && symbol.getType().getName().equals("ENTERO")){ //El simbolo tiene que ser constante y entero
					numSuperior = ((SymbolConstant)symbol).getNum_value(); // Desde la propia tabla de simbolos obtenemos el valor numerico de este simbolo
				}else {
				semanticErrorManager.semanticFatalError("El simbolo "+rangoSuperior.getId()+" no corresponde a una constante de tipo entero."); 
				}
			} else {
				semanticErrorManager.semanticFatalError("El simbolo "+rangoSuperior.getId()+" no esta contenido en la tabla de simbolos."); 
			}
		}else if (rangoSuperior.isMiembrovector()){ // Si es un miembro de vector, no puede ser utilizado en la definicion de tipos
			semanticErrorManager.semanticFatalError("El simbolo "+rangoSuperior.getId()+" no corresponde a una constante de tipo entero."); 
		}

		// Ahora que hemos obtenido los numeros, procedemos a crear el tipo
		if(numSuperior > numInferior){ // Solo crearemos el tipo si el rango superior es mayor que el inferior
			// Creamos el tipo
			TypeIF t_vector_nuevo = new TypeArray(scope, id.getLexema().toUpperCase(), numInferior, numSuperior, tipov);
			tablaTipos.addType(t_vector_nuevo); // Introducimos el tipo en la tabla de tipos
			semanticErrorManager.semanticDebug("Tipo " + id.getLexema().toUpperCase() + " con [" + ((TypeArray)t_vector_nuevo).imprimir() + "] aniadido a la tabla de tipos.");		
		} else { // Emitimos error si los rangos no encajan
			semanticErrorManager.semanticFatalError("El rango superior del vector " + id.getLexema().toUpperCase() + " es mayor que el rango inferior.");
		}
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seccionconstantes ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionconstantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccionconstantes ::= BCONSTANTES defconstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionconstantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // valorconstante ::= NUM 
            {
              Valorconstante RESULT =null;
		int valor_numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor_numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token valor_num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new Valorconstante(Integer.parseInt(valor_num.getLexema().toUpperCase()));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorconstante",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valorconstante ::= CIERTO 
            {
              Valorconstante RESULT =null;
		
	RESULT = new Valorconstante(true);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorconstante",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // valorconstante ::= FALSO 
            {
              Valorconstante RESULT =null;
		
	RESULT = new Valorconstante(false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorconstante",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // defconstantes ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defconstantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // defconstantes ::= IDEN ASIGNACION valorconstante DSENTENCIAS NT$1 defconstantes 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Valorconstante valor = (Valorconstante)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defconstantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Valorconstante valor = (Valorconstante)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

	// Recuperamos el ambito y obtenemos la tabla de simbolos
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF tablaSimbolos = scope.getSymbolTable();

	// Comprobamos si la tabla de simbolos contiene el simbolo
	if(tablaSimbolos.containsSymbol(id.getLexema().toUpperCase())){
		semanticErrorManager.semanticFatalError("Constante " + id.getLexema().toUpperCase() + " en linea " + id.getLine() + " declarada anteriormente, error.");
	} else {
		semanticErrorManager.semanticDebug("Constante " + id.getLexema().toUpperCase() + " en linea " + id.getLine() + " no declarada.");

		// Introducimos la constante en la tabla de simbolos
		if(valor.esNumero()){ // si es numero lo aniadimos como numero
			TypeIF t_entero = scopeManager.searchType("ENTERO");
			SymbolConstant simboloConstante = new SymbolConstant(scope, id.getLexema().toUpperCase(), valor.getValor_num(), t_entero);
			tablaSimbolos.addSymbol(simboloConstante);
			semanticErrorManager.semanticDebug("Constante " + id.getLexema().toUpperCase() + " con valor " + valor.getValor_num() + "  declarada.");
		}else{ // si no, es booleano, y lo aniadimos como booleano
			TypeIF t_booleano = scopeManager.searchType("BOOLEANO");
			SymbolConstant simboloConstante = new SymbolConstant(scope, id.getLexema().toUpperCase(), valor.getValor_bool(), t_booleano);
			tablaSimbolos.addSymbol(simboloConstante);
			semanticErrorManager.semanticDebug("Constante " + id.getLexema().toUpperCase() + " con valor " + valor.getValor_bool() + "  declarada.");
		}

	}



              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // epsilon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= defprincipal 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

