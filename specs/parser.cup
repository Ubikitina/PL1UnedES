package compiler.syntax;

// Declaración de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaración del código de usuario

action code {:
	
	// Codigo del equipo docente
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

	// Metodos creados por mi
	// Metodo para comprobar si existe un simbolo 
	public void errorSiExisteSimbolo(String id, int linea){ 
		// Recuperamos el ambito y obtenemos la tabla de simbolos
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF tablaSimbolos = scope.getSymbolTable();

		// Comprobamos si la tabla de simbolos contiene el simbolo
		if(tablaSimbolos.containsSymbol(id)){
			semanticErrorManager.semanticFatalError("Simbolo " + id + " en la linea " + linea + " declarado anteriormente, error.");
		}
	}

	// Metodo para comprobar si existe un tipo
	public void errorSiExisteTipo(String id, int linea){ 
		if(scopeManager.containsType(id)){
			semanticErrorManager.semanticFatalError("Simbolo " + id + " en la linea " + linea + " declarado anteriormente, error.");
		}
	}
	
:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// Declaración de terminales

terminal Token RANGO;
terminal Token ASIGNACIONVECTOR;
terminal Token STARTIF;
terminal Token NOLOGICO;
terminal Token FRETURN;
terminal Token COMIENZOPROGRAMA;
terminal Token ENTERO;
terminal Token FINBLOQUESENTENCIAS;
terminal Token COMIENZOPROCEDIMIENTO;
terminal Token COMIENZOBUCLEPARA;
terminal Token BOOLEANO;
terminal Token COMIENZOSI;
terminal Token DECLVECTOR;
terminal Token CIZQUIERDO;
terminal Token DECLAREFUNCION;
terminal Token CDERECHO;
terminal Token IDEN;
terminal Token IGUALDAD;
terminal Token ALTERNATIVASI;
terminal Token DECLVARIABLES;
terminal Token STRING;
terminal Token FALSO;
terminal Token PARAMETROVALOR;
terminal Token PIZQUIERDO;
terminal Token PDERECHO;
terminal Token CIERTO;
terminal Token RANGOBUCLEPARA;
terminal Token PRODUCTO;
terminal Token SUMA;
terminal Token COMIENZOSUBPROGRAMAS;
terminal Token COMIENZODECLTIPOS;
terminal Token DIDENTIFICADORES;
terminal Token FINPROGRAMA;
terminal Token BCONSTANTES;
terminal Token ESCRIBIR;
terminal Token NUM;
terminal Token COMIENZO;
terminal Token YLOGICA;
terminal Token DELIMFUNC;
terminal Token DSENTENCIAS;
terminal Token MENORQUE;
terminal Token ASIGNACION;




// Declaración de no terminales


non terminal  			program;
non terminal Axiom		axiom;
non terminal  			epsilon;
non terminal defconstantes;
non terminal Valorconstante valorconstante;
non terminal seccionconstantes;
non terminal deftipos;
non terminal Tipovector tipovector;
non terminal Valorango valorango;
non terminal secciontipos;
non terminal Defvariables defvariables;
non terminal Tipovariable tipovariable;
non terminal Listavariables listavariables;
non terminal seccionvariables;
non terminal defsubprograma;
non terminal puntoycomaopcional;

non terminal Tipovector tiporetornofuncion;
non terminal seccionsubprograma;
non terminal defprincipal;
non terminal Selectorvalororeferencia selectorvalororeferencia;


non terminal Expresion expresion;
non terminal Expresion expresionlvl2;
non terminal Expresion expresionlvl3;
non terminal Expresion expresionlvl4;
non terminal Expresion expresionlvl5;




non terminal Miembrovector miembrovector;
non terminal procedimiento;
non terminal funcion;
non terminal selectorpof;

non terminal Listavariables parametrofuncionoproc;
non terminal Llamadafuncion llamadafuncion ; 

non terminal Parteizquierdaasignacion parteizquierdaasignacion;  
non terminal sentenciadeasignacion;

non terminal parametroEscribir ;
non terminal sentenciaEscribir ;

non terminal sentencia;
non terminal sentenciaFuncion;
non terminal listaSentencias;
non terminal listaSentenciasFuncion;
non terminal sentenciaif;
non terminal sentenciaifFuncion;
non terminal rellenoif;
non terminal rellenoifFuncion;
non terminal sentenciafor;
non terminal sentenciaforFuncion;
non terminal sentenciaDevolver;


non terminal Expresion parametroasignacion;

non terminal sentenciallamadafuncion;





// Declaración de relaciones de precedencia
precedence left		PIZQUIERDO, PDERECHO, YLOGICA, MENORQUE, IGUALDAD, CIZQUIERDO, CDERECHO, SUMA ;
precedence left PRODUCTO;
precedence right	NOLOGICO;



// Declaración de reglas de producción

start with program;

program ::= 
  {: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   :}
  axiom:ax
  {: 
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};

axiom ::= defprincipal;

epsilon ::=;

/*================================================*
 *================CONSTANTES======================*
 *================================================*/

//Definición de constantes
defconstantes ::=   IDEN:id ASIGNACION valorconstante:valor DSENTENCIAS {:
	// Recuperamos el ambito y obtenemos la tabla de simbolos
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF tablaSimbolos = scope.getSymbolTable();

	// Comprobamos si la tabla de simbolos contiene el simbolo
	if(tablaSimbolos.containsSymbol(id.getLexema().toUpperCase())){
		semanticErrorManager.semanticFatalError("Constante " + id.getLexema().toUpperCase() + " en linea " + id.getLine() + " declarada anteriormente, error.");
	} else {
		semanticErrorManager.semanticDebug("Constante " + id.getLexema().toUpperCase() + " en linea " + id.getLine() + " no declarada.");

		// Introducimos la constante en la tabla de simbolos
		if(valor.esNumero()){ // si es numero lo aniadimos como numero
			TypeIF t_entero = scopeManager.searchType("ENTERO");
			SymbolConstant simboloConstante = new SymbolConstant(scope, id.getLexema().toUpperCase(), valor.getValor_num(), t_entero);
			tablaSimbolos.addSymbol(simboloConstante);
			semanticErrorManager.semanticDebug("Constante " + id.getLexema().toUpperCase() + " con valor " + valor.getValor_num() + "  declarada.");
		}else{ // si no, es booleano, y lo aniadimos como booleano
			TypeIF t_booleano = scopeManager.searchType("BOOLEANO");
			SymbolConstant simboloConstante = new SymbolConstant(scope, id.getLexema().toUpperCase(), valor.getValor_bool(), t_booleano);
			tablaSimbolos.addSymbol(simboloConstante);
			semanticErrorManager.semanticDebug("Constante " + id.getLexema().toUpperCase() + " con valor " + valor.getValor_bool() + "  declarada.");
		}

	}


:} defconstantes | epsilon; 

valorconstante ::=   FALSO {:
	RESULT = new Valorconstante(false);
:} | CIERTO {:
	RESULT = new Valorconstante(true);
:} | NUM:valor_num {:
	RESULT = new Valorconstante(Integer.parseInt(valor_num.getLexema().toUpperCase()));
:} ;

seccionconstantes ::= BCONSTANTES defconstantes | epsilon;


/*================================================*
 *==========DEFINICION DE TIPOS===================*
 *================================================*/

 //Definición de tipos
deftipos ::=IDEN:id ASIGNACION DECLVECTOR CIZQUIERDO valorango:rangoInferior RANGO valorango:rangoSuperior CDERECHO ASIGNACIONVECTOR tipovector:tipov  DSENTENCIAS {:
	// Recuperamos el ambito y obtenemos la tabla de tipos
	ScopeIF scope = scopeManager.getCurrentScope();
	TypeTableIF tablaTipos = scope.getTypeTable();

	// Comprobamos si el tipo estaba declarado anteriormente, para emitir error si es asi.
	if(scopeManager.containsType(id.getLexema().toUpperCase())){ 
		semanticErrorManager.semanticFatalError("Tipo " + id.getLexema().toUpperCase() + " en linea " + id.getLine() + " incluido en la tabla de tipos anteriormente, error.");
	} else { // Si el tipo no estaba declarado anteriormente
		
		// Comprobamos que tanto el rango inferior como el rango superior sean constantes y obtenemos sus valores.

		// Para ello, primero declaramos dos enteros auxiliares
		int numInferior = 0;
		int numSuperior = 0;

		// Comprobación para el rango inferior
		if(rangoInferior.isNum()){ // Si es un numero constante, cogemos directamente su valor
			numInferior = rangoInferior.getNum();
		}else if (rangoInferior.isIden()){ // Si es un identificador
			// Miramos si la tabla de simbolos contiene el simbolo, nos esperamos que lo haga. 
			if(scopeManager.containsSymbol(rangoInferior.getId())){
				SymbolIF symbol = scopeManager.searchSymbol(rangoInferior.getId()); // Obtenemos el simbolo
				if(symbol instanceof SymbolConstant && symbol.getType().getName().equals("ENTERO")){ //El simbolo tiene que ser constante y entero
					numInferior = ((SymbolConstant)symbol).getNum_value(); // Desde la propia tabla de simbolos obtenemos el valor numerico de este simbolo
				}else {
				semanticErrorManager.semanticFatalError("El simbolo "+rangoInferior.getId()+" no corresponde a una constante de tipo entero."); 
				}
			} else {
				semanticErrorManager.semanticFatalError("El simbolo "+rangoInferior.getId()+" no esta contenido en la tabla de simbolos."); 
			}
		}else if (rangoInferior.isMiembrovector()){ // Si es un miembro de vector, no puede ser utilizado en la definicion de tipos
			semanticErrorManager.semanticFatalError("El simbolo "+rangoInferior.getId()+" no corresponde a una constante de tipo entero."); 
		}

		// Comprobacion para el rango superior
		if(rangoSuperior.isNum()){ // Si es un numero constante, cogemos directamente su valor
			numSuperior = rangoSuperior.getNum();
		}else if (rangoSuperior.isIden()){ // Si es un identificador
			// Miramos si la tabla de simbolos contiene el simbolo, nos esperamos que lo haga. 
			if(scopeManager.containsSymbol(rangoSuperior.getId())){
				SymbolIF symbol = scopeManager.searchSymbol(rangoSuperior.getId()); // Obtenemos el simbolo
				if(symbol instanceof SymbolConstant && symbol.getType().getName().equals("ENTERO")){ //El simbolo tiene que ser constante y entero
					numSuperior = ((SymbolConstant)symbol).getNum_value(); // Desde la propia tabla de simbolos obtenemos el valor numerico de este simbolo
				}else {
				semanticErrorManager.semanticFatalError("El simbolo "+rangoSuperior.getId()+" no corresponde a una constante de tipo entero."); 
				}
			} else {
				semanticErrorManager.semanticFatalError("El simbolo "+rangoSuperior.getId()+" no esta contenido en la tabla de simbolos."); 
			}
		}else if (rangoSuperior.isMiembrovector()){ // Si es un miembro de vector, no puede ser utilizado en la definicion de tipos
			semanticErrorManager.semanticFatalError("El simbolo "+rangoSuperior.getId()+" no corresponde a una constante de tipo entero."); 
		}

		// Ahora que hemos obtenido los numeros, procedemos a crear el tipo
		if(numSuperior > numInferior){ // Solo crearemos el tipo si el rango superior es mayor que el inferior
			// Creamos el tipo
			TypeIF t_vector_nuevo = new TypeArray(scope, id.getLexema().toUpperCase(), numInferior, numSuperior, tipov);
			tablaTipos.addType(t_vector_nuevo); // Introducimos el tipo en la tabla de tipos
			semanticErrorManager.semanticDebug("Tipo " + id.getLexema().toUpperCase() + " con [" + ((TypeArray)t_vector_nuevo).imprimir() + "] aniadido a la tabla de tipos.");		
		} else { // Emitimos error si los rangos no encajan
			semanticErrorManager.semanticFatalError("El rango superior del vector " + id.getLexema().toUpperCase() + " es mayor que el rango inferior.");
		}
	}
:} deftipos | epsilon;

tipovector ::=BOOLEANO {:
	RESULT = new Tipovector(scopeManager.searchType("BOOLEANO"), "BOOLEANO");
:} | ENTERO {:
	RESULT = new Tipovector(scopeManager.searchType("ENTERO"), "ENTERO");
:} ;

valorango ::= NUM:valor_num {:
	RESULT = new Valorango(Integer.parseInt(valor_num.getLexema().toUpperCase()));
:} | IDEN:id {:
	RESULT = new Valorango(id.getLexema().toUpperCase(), true, false);
:} | miembrovector:m {: //TODO no se si esta bien porque deberiamos de coger el valor del miembrovector, no su identificador
	RESULT = new Valorango(m.getId(), false, true);
:};

secciontipos ::= COMIENZODECLTIPOS deftipos | epsilon; 

/*================================================*
 *==========DEFINICION DE VARIABLES===============*
 *================================================*/

// Definición de variables
tipovariable ::= BOOLEANO {:
	RESULT = new Tipovariable(scopeManager.searchType("BOOLEANO"), "BOOLEANO");
:}| ENTERO {:
	RESULT = new Tipovariable(scopeManager.searchType("ENTERO"), "ENTERO");
:}| IDEN:id {:
	// Recuperamos el ambito
	ScopeIF scope = scopeManager.getCurrentScope();

	// Comprobamos si la tabla de tipos contiene el tipo.
	if(scopeManager.containsType(id.getLexema().toUpperCase())){ //Si lo contiene, creamos el no terminal tipovariable para seguir adelante
		RESULT = new Tipovariable(scopeManager.searchType(id.getLexema().toUpperCase()), id.getLexema().toUpperCase());
	} else { // Si no lo contiene, lanzamos error
		semanticErrorManager.semanticFatalError("Tipo " + id.getLexema().toUpperCase() + " en linea " + id.getLine() + " no esta incluido en la tabla de tipos anteriormente, error.");
	}
:};

selectorvalororeferencia ::=  PARAMETROVALOR IDEN:id {:
	RESULT = new Selectorvalororeferencia(id.getLexema().toUpperCase(), false);
:} | expresion:ex {:
	Selectorvalororeferencia svor = new Selectorvalororeferencia(ex.getId(), true);
	svor.setTipo(ex.getTipo());
	RESULT = svor;
:};

defvariables ::= listavariables:listVariables DELIMFUNC tipovariable:tipo puntoycomaopcional defvariables:listVariable {:
	// Comprobar que ningun variable de la lista existe
	ArrayList<Selectorvalororeferencia> listaNuevasVariables = listVariables.getListaV();
	for (int x = 0; x < listaNuevasVariables.size(); x++) { 
		if(listaNuevasVariables.get(x).getId() != null){
			errorSiExisteSimbolo(listaNuevasVariables.get(x).getId(), 0); //TODO linea que causa el error pendiente de hacer
		}else{
			semanticErrorManager.semanticFatalError("Se ha utilizado una expresion no admitida en la declaracion de variables de la seccion de variables, declaracion de funciones o declaracion de procedimientos.");
		}
	} 

	// Como ninguno de la lista existe, añado las variables a defvariables y devuelvo defvariables
	if(listVariable == null){ // Si el hashmap de Tipo-ListaVariables esta vacio
		RESULT = new Defvariables(tipo.getTipo(), (ArrayList<Selectorvalororeferencia>)(listVariables.getListaV()));
	} else { // Si el hashmap de Tipo-ListaVariables contiene elementos
		listVariable.putParTipoVariable(tipo.getTipo(), (ArrayList<Selectorvalororeferencia>)(listVariables.getListaV()));
		RESULT = listVariable;
	}
:} | epsilon; 

listavariables ::= selectorvalororeferencia:selector DIDENTIFICADORES listavariables:listaV {:
	listaV.addElemento(selector);
	RESULT = listaV; 
:} | selectorvalororeferencia:selector {:
	RESULT = new Listavariables(selector);
:} | epsilon ;

seccionvariables ::= DECLVARIABLES defvariables:listVariables {: 
	// Obtenemos el ambito y la tabla de simbolos
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF symbolTable = scope.getSymbolTable();

	semanticErrorManager.semanticDebug("Variables creadas con su correspondiente tipo: "+listVariables.toString());

	ArrayList<Selectorvalororeferencia> listaAux = listVariables.getListaVariablesConTipo();

	// vamos recorriendo cada elemento de la lista de Selectorvalororeferencia
	for(int x = 0; x < listaAux.size(); x++){
		Selectorvalororeferencia variable = listaAux.get(x); // obtenemos cada Selectorvalororeferencia
		if(variable.getId() == null){ // Si es null, no es un IDEN por lo que lanzamos error
			semanticErrorManager.semanticFatalError("Se ha detectado una notacion de declaracion de variable no autorizada. Asegurar que todas las variables sean declaradas con identificadores.");
		}else{ // Si no es null, es un IDEN
			if(variable.isPorValor()){ //comprobamos que es por valor				
				errorSiExisteSimbolo(variable.getId(), 0); //TODO el numero de linea no esta definida aqui
				SymbolVariable symbol = new SymbolVariable(scope, variable.getId(), variable.getTipo());
				symbolTable.addSymbol(symbol);
			}else{ // si no es por valor, lanzamos error
				semanticErrorManager.semanticFatalError("No se puede declarar la variable " + variable.getId() + ", es por referencia.");
			}
		}
	}

:}| epsilon  ;

puntoycomaopcional ::= DSENTENCIAS | epsilon;


/*================================================*
 *================SUBPROGRAMAS====================*
 *================================================*/

//reglas de subprogramas
tiporetornofuncion ::= tipovector:t {:
	RESULT = t;
:} ; 

procedimiento ::= COMIENZOPROCEDIMIENTO IDEN:id PIZQUIERDO defvariables:listaVar {:
	// Obtenemos el ambito, la tabla de tipos y la tabla de simbolos
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF symbolTable = scope.getSymbolTable();
	TypeTableIF typeTable = scope.getTypeTable();

	// Invocamos los metodos que lanzan un error si el id esta anteriormente declarado bien en la tabla de simbolos o bien en la tabla de tipos
	errorSiExisteSimbolo(id.getLexema().toUpperCase(), id.getLine());
	errorSiExisteTipo(id.getLexema().toUpperCase(), id.getLine());
	
	// Creamos el tipo y el simbolo del procedimiento
	TypeProcedure tp = new TypeProcedure(scope, id.getLexema().toUpperCase());
	tp.setListaParametros(listaVar.getListaVariablesConTipo());
	typeTable.addType(id.getLexema().toUpperCase(), tp);
	SymbolProcedure sp = new SymbolProcedure(scope, id.getLexema().toUpperCase(), tp);
	sp.setListaParametros(listaVar.getListaVariablesConTipo());
	symbolTable.addSymbol(id.getLexema().toUpperCase(), sp);

	// Creamos el ambito con el nombre del procedimiento y emitimos el mensaje de comprobación
	scopeManager.openScope(id.getLexema().toUpperCase());
	scope = scopeManager.getCurrentScope();
	semanticErrorManager.semanticDebug("El nombre del nuevo ambito es: " + scope.getName() + " con el nivel: " + scope.getLevel());	
	

	// listaVar se trata de una clase que contiene un Arraylist<Selectorvalororeferencia> que le pasamos al procedimiento. Cogeremos cada variable uno a uno e incluiremos en la tabla de símbolos.
	if(listaVar != null){
		// Obtenemos la tabla de simbolos
		symbolTable = scope.getSymbolTable();

		// Primero recuperamos el ArrayList
		ArrayList<Selectorvalororeferencia> listaAux = listaVar.getListaVariablesConTipo();

		// Recorremos la lista e introducimos las variables en la tabla de simbolos
		for(int x = 0; x < listaAux.size(); x++){
			Selectorvalororeferencia variable = listaAux.get(x);
			errorSiExisteSimbolo(variable.getId(), 0); //TODO la linea no esta definida aqui

			// Comprobacion de que no se pasa por valor ningun vector completo, esta prohibido
			if(variable.isPorValor() && variable.getTipo() instanceof TypeArray){
				semanticErrorManager.semanticFatalError("No se puede pasar por valor el vector completo " + variable.getId());
			}

			// Crear e incluir el simbolo al symbolTable
			SymbolParameter symbol = new SymbolParameter(scope, variable.getId(), variable.getTipo());
			symbolTable.addSymbol(symbol);
		}
	}
:} PDERECHO DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO sentencia listaSentencias FINBLOQUESENTENCIAS DSENTENCIAS {:
	// Cerramos el ambito actual (current scope)
	scopeManager.closeScope();
	semanticErrorManager.semanticDebug("Se ha cerrado el ambito actual.");
:};

funcion ::= DECLAREFUNCION IDEN:id PIZQUIERDO defvariables:listaVar PDERECHO DELIMFUNC tiporetornofuncion:tipo {:
	// Obtenemos el ambito, la tabla de tipos y la tabla de simbolos
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF symbolTable = scope.getSymbolTable();
	TypeTableIF typeTable = scope.getTypeTable();

	// Invocamos los metodos que lanzan un error si el id esta anteriormente declarado bien en la tabla de simbolos o bien en la tabla de tipos
	errorSiExisteSimbolo(id.getLexema().toUpperCase(), id.getLine());
	errorSiExisteTipo(id.getLexema().toUpperCase(), id.getLine());
	
	// Creamos el tipo y el simbolo de la funcion
	TypeFunction tf = new TypeFunction(scope, id.getLexema().toUpperCase(), tipo.getNombre_tipo(), listaVar.getListaVariablesConTipo());
	typeTable.addType(id.getLexema().toUpperCase(), tf);
	SymbolFunction sf = new SymbolFunction(scope, id.getLexema().toUpperCase(), tf, tipo.getNombre_tipo(), listaVar.getListaVariablesConTipo());
	symbolTable.addSymbol(id.getLexema().toUpperCase(), sf);

	// Creamos el ambito con el nombre de la funcion y emitimos el mensaje de comprobación
	scopeManager.openScope(id.getLexema().toUpperCase());
	scope = scopeManager.getCurrentScope();
	semanticErrorManager.semanticDebug("El nombre del nuevo ambito es: " + scope.getName() + " con el nivel: " + scope.getLevel());
	

	// listVar se trata de una clase que contiene un ArrayList de variables que le pasamos a la funcion. Cogeremos cada variable uno a uno e incluiremos en la tabla de símbolos.
	if(listaVar != null){
		// Obtenemos la tabla de simbolos
		symbolTable = scope.getSymbolTable();

		// Primero recuperamos el ArrayList
		ArrayList<Selectorvalororeferencia> listaAux = listaVar.getListaVariablesConTipo();

		// Recorremos la lista e introducimos las variables en la tabla de simbolos
		for(int x = 0; x < listaAux.size(); x++){
			Selectorvalororeferencia variable = listaAux.get(x);
			errorSiExisteSimbolo(variable.getId(), 0); //TODO la linea no esta definida aqui

			// Comprobacion de que no se pasa por valor ningun vector completo, esta prohibido
			if(variable.isPorValor() && variable.getTipo() instanceof TypeArray){
				semanticErrorManager.semanticFatalError("No se puede pasar por valor el vector completo " + variable.getId());
			}

			// Crear e incluir el simbolo al symbolTable
			SymbolParameter symbol = new SymbolParameter(scope, variable.getId(), variable.getTipo());
			symbolTable.addSymbol(symbol);
		}
	}

	// Comprobar que exista el tipo de retorno. Para ello, si no lo contiene, lanzaremos un error.
	if(!scopeManager.containsType(tipo.getNombre_tipo())){
		semanticErrorManager.semanticFatalError("Tipo " + tipo.getNombre_tipo() + " de retorno de funcion no existe, error.");
	} //es posible que no sea necesario hacer esta comprobacion, porque ya tenemos el tipo en su sitio y cualquier fallo lo detectaria la sintaxis

:} DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO sentenciaFuncion listaSentenciasFuncion FINBLOQUESENTENCIAS DSENTENCIAS {:
	// Cerramos el ambito actual (current scope)
	scopeManager.closeScope();
	semanticErrorManager.semanticDebug("Se ha cerrado el ambito actual.");
:} ;
selectorpof ::= procedimiento | funcion ;
defsubprograma ::=selectorpof  defsubprograma | epsilon ;
seccionsubprograma ::=COMIENZOSUBPROGRAMAS  defsubprograma  | epsilon ;

/*================================================*
 *==============PROGRAMA PRINCIPAL================*
 *================================================*/

// Definición de programa principal
defprincipal ::= COMIENZOPROGRAMA IDEN:id {:

	// Creamos el ambito global con el nombre del programa principal
	scopeManager.openScope(id.getLexema().toUpperCase());
	ScopeIF scope = scopeManager.getCurrentScope();
	// Comprobaciones para ver si el ambito se ha creado correctamente
	semanticErrorManager.semanticDebug("El nombre del nuevo ambito es: " + scope.getName());
	semanticErrorManager.semanticDebug("El nivel del nuevo ambito es: " + scope.getLevel()); // El nivel esperado es 0
	
	// Obtencion de la tabla de tipos y simbolos
	SymbolTableIF symbolTable = scope.getSymbolTable(); //BORRAR No estoy segura para que lo recupero si no se usa
	TypeTableIF typeTable = scope.getTypeTable();
	
	// Introducimos los tipos entero y booleano que describe el enunciado
	TypeSimple tsEntero = new TypeSimple(scope, "ENTERO");
	typeTable.addType("ENTERO",tsEntero);
	TypeSimple tsBooleano = new TypeSimple(scope, "BOOLEANO");
	typeTable.addType("BOOLEANO",tsBooleano);
	
:} DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO listaSentencias FINBLOQUESENTENCIAS FINPROGRAMA {:
	// Cerramos el ambito actual (current scope)
	scopeManager.closeScope();
	semanticErrorManager.semanticDebug("Se ha cerrado el ambito actual.");
:};

/*================================================*
 *==================EXPRESIONES===================*
 *================================================*/

// Expresiones
expresion ::=  expresion:e1 MENORQUE  expresion:e2 {:
	// Comprobamos que los tipos no sean null para no tener un null pointer exception
	if(e1.getTipo() != null && e2.getTipo() != null){
		if(e1.getTipo().getName().equals("ENTERO") && e2.getTipo().getName().equals("ENTERO")){
			Expresion expr = new Expresion(); // Creamos la expresion
			expr.setTipo(scopeManager.searchType("BOOLEANO"));// Establecemos el tipo
			RESULT = expr; // Propagamos la expresion
		} else {
			semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " < " + e2.getId() + " no es un entero.");
		}
	}else{
		semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " < " + e2.getId() + " es null.");
	}
:} |  expresion:e1 IGUALDAD  expresion:e2 {:
	// Comprobamos que los tipos no sean null para no tener un null pointer exception
	if(e1.getTipo() != null && e2.getTipo() != null){
		if(e1.getTipo().getName().equals("ENTERO") && e2.getTipo().getName().equals("ENTERO")){
			Expresion expr = new Expresion(); // Creamos la expresion
			expr.setTipo(scopeManager.searchType("BOOLEANO"));// Establecemos el tipo
			RESULT = expr; // Propagamos la expresion
		} else {
			semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " == " + e2.getId() + " no es un entero.");
		}
	}else{
		semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " == " + e2.getId() + " es null.");
	}
:} | IDEN:id {:
	Expresion expr = new Expresion(id.getLexema().toUpperCase()); // Creamos la expresion
	if(scopeManager.containsSymbol(expr.getId())){ // Si existe ya en la tabla de simbolos
		expr.setTipo(scopeManager.searchSymbol(expr.getId()).getType());// Establecemos el tipo
		semanticErrorManager.semanticDebug(expr);
	}
	RESULT = expr;
:} | llamadafuncion:lf {:
	Expresion expr = new Expresion(); // Creamos la expresion
	expr.setTipo(lf.getTipo());// Establecemos el tipo
	RESULT = expr;
:} | CIERTO {:
	Expresion expr = new Expresion(); // Creamos la expresion
	expr.setTipo(scopeManager.searchType("BOOLEANO"));// Establecemos el tipo
	RESULT = expr;
:} | FALSO {:
	Expresion expr = new Expresion(); // Creamos la expresion
	expr.setTipo(scopeManager.searchType("BOOLEANO"));// Establecemos el tipo
	RESULT = expr;
:} | miembrovector:mv {:
	Expresion expr = new Expresion(); // Creamos la expresion
	expr.setTipo(mv.getTipo());// Establecemos el tipo
	RESULT = expr;
:} | NUM {:
	Expresion expr = new Expresion(); // Creamos la expresion
	expr.setTipo(scopeManager.searchType("ENTERO"));// Establecemos el tipo
	RESULT = expr;
:} | expresionlvl2:ex {:
	RESULT = ex;
:};

expresionlvl2 ::=  expresion:e1 SUMA expresion:e2 {:
	// Comprobamos que los tipos no sean null para no tener un null pointer exception
	if(e1.getTipo() != null && e2.getTipo() != null){
		if(e1.getTipo().getName().equals("ENTERO") && e2.getTipo().getName().equals("ENTERO")){
			Expresion expr = new Expresion(); // Creamos la expresion
			expr.setTipo(scopeManager.searchType("ENTERO"));// Establecemos el tipo
			RESULT = expr; // Propagamos la expresion
		} else {
			semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " + " + e2.getId() + " no es un entero.");
		}
	}else{
		semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " + " + e2.getId() + " es null.");
	}
:} | expresionlvl3:ex {:
	RESULT = ex;
:} ;

expresionlvl3 ::=  expresion:e1 YLOGICA expresion:e2 {:
	// Comprobamos que los tipos no sean null para no tener un null pointer exception
	if(e1.getTipo() != null && e2.getTipo() != null){
		if(e1.getTipo().getName().equals("BOOLEANO") && e2.getTipo().getName().equals("BOOLEANO")){
			Expresion expr = new Expresion(); // Creamos la expresion
			expr.setTipo(scopeManager.searchType("BOOLEANO"));// Establecemos el tipo
			RESULT = expr; // Propagamos la expresion
		} else {
			semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " y " + e2.getId() + " no es un booleano.");
		}
	}else{
		semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " y " + e2.getId() + " es null.");
	}
:} |  expresion:e1 PRODUCTO expresion:e2 {:
	// Comprobamos que los tipos no sean null para no tener un null pointer exception
	if(e1.getTipo() != null && e2.getTipo() != null){
		if(e1.getTipo().getName().equals("ENTERO") && e2.getTipo().getName().equals("ENTERO")){
			Expresion expr = new Expresion(); // Creamos la expresion
			expr.setTipo(scopeManager.searchType("ENTERO"));// Establecemos el tipo
			RESULT = expr; // Propagamos la expresion
		} else {
			semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " * " + e2.getId() + " no es un entero.");
		}
	}else{
		semanticErrorManager.semanticFatalError("Uno o ambos de los tipos de la expresion " + e1.getId() + " * " + e2.getId() + " es null.");
	}
:} | expresionlvl4:ex {:
	RESULT = ex;
:};

expresionlvl4 ::= NOLOGICO  expresion:e1 {:
	// Comprobamos que los tipos no sean null para no tener un null pointer exception
	if(e1.getTipo() != null){
		if(e1.getTipo().getName().equals("BOOLEANO")){
			Expresion expr = new Expresion(); // Creamos la expresion
			expr.setTipo(scopeManager.searchType("BOOLEANO"));// Establecemos el tipo
			RESULT = expr; // Propagamos la expresion
		} else {
			semanticErrorManager.semanticFatalError("El tipo de la expresion " + e1.getId() + " no es un booleano.");
		}
	}else{
		semanticErrorManager.semanticFatalError("El tipo de la expresion " + e1.getId() + " es null.");
	}
:} | expresionlvl5:ex {:
	RESULT = ex;
:} ;

expresionlvl5 ::= PIZQUIERDO expresion:expr PDERECHO {:
	RESULT = expr;
:} | CIZQUIERDO expresion:expr CDERECHO {:
	RESULT = expr;
:} ;

/*================================================*
 *================ACCESO A VECTORES===============*
 *================================================*/

// Acceso a vectores
miembrovector::= IDEN:id CIZQUIERDO valorango CDERECHO {: //TODO aqui deberia de comparar que el numero de valorango entre dentro de los limites del rango del tipo de vector
	// Comprobamos si el miembrovector esta previametne incluido en la tabla de simbolos
	if(scopeManager.containsSymbol(id.getLexema().toUpperCase())){
		Miembrovector mv = new Miembrovector(id.getLexema().toUpperCase());
		TypeIF tipoMiembroVector = (scopeManager.searchSymbol(id.getLexema().toUpperCase())).getType();
		if(tipoMiembroVector instanceof TypeArray){
			mv.setTipo(((TypeArray)tipoMiembroVector).getTipo().getTipo()); // Obtenemos el tipo y establecemos al mv
			RESULT = mv;
		}else{
			semanticErrorManager.semanticFatalError("El simbolo "+ id.getLexema().toUpperCase()+ " no es una instancia de TypeArray.");
		}
		
	} else {
		semanticErrorManager.semanticFatalError("El simbolo "+ id.getLexema().toUpperCase()+ " no esta contenido en la tabla de simbolos."); 
	}	
:};

/*================================================*
 *============SENTENCIAS DE ASIGNACION============*
 *================================================*/
 
parteizquierdaasignacion ::= IDEN:id {:
	// Comprobamos si el identificador esta previametne incluido en la tabla de simbolos
	if(scopeManager.containsSymbol(id.getLexema().toUpperCase())){
		Parteizquierdaasignacion pizq = new Parteizquierdaasignacion(id.getLexema().toUpperCase());
		pizq.setTipo((scopeManager.searchSymbol(id.getLexema().toUpperCase())).getType()); // Obtenemos el tipo del simbolo y establecemos al pizq
		RESULT = pizq;
	} else {
		semanticErrorManager.semanticFatalError("El simbolo "+ id.getLexema().toUpperCase()+ " no esta contenido en la tabla de simbolos."); 
	}
:} | miembrovector:mv {:
	Parteizquierdaasignacion pizq = new Parteizquierdaasignacion(mv.getId());
	pizq.setTipo(mv.getTipo());
	RESULT = pizq;
:};

sentenciadeasignacion ::= parteizquierdaasignacion:pizq ASIGNACION parametroasignacion:expr DSENTENCIAS {:
	// La parte izquierda tiene que ser instancia de SymbolVariable o SymbolParameter, y tiene que ser una instancia de tipo simple
	if((scopeManager.searchSymbol(pizq.getId())instanceof SymbolVariable || scopeManager.searchSymbol(pizq.getId())instanceof SymbolParameter) && (pizq.getTipo() instanceof TypeSimple)){
		// El tipo de pizq tiene que coincidir con el tipo de expr
		if(pizq.getTipo().getName().equals(expr.getTipo().getName())){
			semanticErrorManager.semanticDebug("El tipo de " + pizq.getId()+ " y " + expr.getId() + " coinciden, asignacion OK.");
		}else{
			semanticErrorManager.semanticFatalError("El tipo de " + pizq.getId()+ " y " + expr.getId() + " no coinciden.");
		}
	}else{
		semanticErrorManager.semanticFatalError(pizq.getId()+ " no puede estar en la parte izquierda de una sentencia de asignacion porque no es o SymbolVariable o SymbolParameter o del tipo TypeSimple.");
	}

:}; 

parametroasignacion ::= expresion:e {:
	RESULT = e;
:} ;

/*================================================*
 *===============LLAMADA A FUNCION================*
 *================================================*/
 // Nota - Esta seccion, pese a llamarse llamada a funcion, tambien sirve para realizar las llamadas a los procedimientos.

parametrofuncionoproc ::=     listavariables:lv {:
	RESULT = lv;
:} ;

llamadafuncion ::= IDEN:id PIZQUIERDO parametrofuncionoproc:lv PDERECHO {:
	// Comprobamos si el identificador esta previamente incluido en la tabla de simbolos como SymbolProcedure o SymbolFunction
	if(!scopeManager.containsSymbol(id.getLexema().toUpperCase()) || !(   scopeManager.searchSymbol(id.getLexema().toUpperCase()) instanceof SymbolProcedure || scopeManager.searchSymbol(id.getLexema().toUpperCase()) instanceof SymbolFunction  )){
		semanticErrorManager.semanticFatalError("La funcion "+ id.getLexema().toUpperCase()+ " no esta contenido en la tabla de simbolos como funcion o procedimiento."); 
	}

	Llamadafuncion lf = new Llamadafuncion(id.getLexema().toUpperCase());
	lf.setTipo((scopeManager.searchSymbol(id.getLexema().toUpperCase())).getType()); // Obtenemos el tipo del simbolo y establecemos al lf

	//Variables para la comprobacion de parametros
	ArrayList<Selectorvalororeferencia> listaParametrosEsperados = null;
	ArrayList<Selectorvalororeferencia> listaParametrosPasados = lv.getListaV();
		
	// Si es una funcion
	if(scopeManager.searchSymbol(id.getLexema().toUpperCase()) instanceof SymbolFunction){
		//establecemos el tipo de retorno como tipo
		SymbolFunction sf = (SymbolFunction)scopeManager.searchSymbol(id.getLexema().toUpperCase());
		lf.setTipo(scopeManager.searchType(sf.getTipoRetorno()));

		// Obtenemos la lista de parametros esperados de la funcion
		listaParametrosEsperados = sf.getListaParametros();
	}

	// Si es un procedimiento
	if(scopeManager.searchSymbol(id.getLexema().toUpperCase()) instanceof SymbolProcedure){
		// Obtenemos la lista de parametros esperados del procedimiento
		SymbolProcedure sp = (SymbolProcedure)scopeManager.searchSymbol(id.getLexema().toUpperCase());
		listaParametrosEsperados = sp.getListaParametros();
	}

	// Comparamos ambas listas de parametros
	if(listaParametrosEsperados.size() != listaParametrosPasados.size()){ // Comprobacion en numero
		semanticErrorManager.semanticFatalError("El numero de parametros de "+ id.getLexema().toUpperCase()+ " no corresponde a lo esperado."); 
	}
	for (int x = 0; x < listaParametrosEsperados.size(); x++){ // Comprobacion en tipo y orden
		Selectorvalororeferencia parametroEsperado = listaParametrosEsperados.get(x);
		Selectorvalororeferencia parametroPasado = listaParametrosPasados.get(x);

		if(!parametroEsperado.getTipo().getName().equals(parametroPasado.getTipo().getName())){
			semanticErrorManager.semanticFatalError("Alguno o varios de los tipos u orden de los parametros de "+ id.getLexema().toUpperCase()+ " no corresponde a lo esperado.");
		}
	}

	RESULT = lf;
:};  

sentenciallamadafuncion ::= llamadafuncion DSENTENCIAS;

/*================================================*
 *===================SENTENCIAS===================*
 *================================================*/

sentencia ::= sentenciadeasignacion | sentenciaif | sentenciafor | sentenciaEscribir | sentenciallamadafuncion ;

sentenciaFuncion ::= sentenciadeasignacion | sentenciaifFuncion | sentenciaforFuncion | sentenciaEscribir | sentenciallamadafuncion | sentenciaDevolver;

listaSentencias ::= sentencia  listaSentencias | epsilon;

listaSentenciasFuncion ::= sentenciaFuncion listaSentenciasFuncion | epsilon;

/*================================================*
 *======================IF========================*
 *================================================*/

sentenciaif ::= COMIENZOSI expresion  STARTIF DELIMFUNC listaSentencias rellenoif  FINBLOQUESENTENCIAS COMIENZOSI DSENTENCIAS ;

sentenciaifFuncion ::= COMIENZOSI expresion  STARTIF DELIMFUNC listaSentenciasFuncion rellenoifFuncion  FINBLOQUESENTENCIAS COMIENZOSI DSENTENCIAS ;

rellenoifFuncion ::=  ALTERNATIVASI DELIMFUNC  listaSentenciasFuncion | epsilon ;

rellenoif ::=  ALTERNATIVASI DELIMFUNC  listaSentencias | epsilon ;

/*================================================*
 *======================FOR=======================*
 *================================================*/

sentenciafor ::= COMIENZOBUCLEPARA IDEN RANGOBUCLEPARA expresion RANGO expresion DELIMFUNC listaSentencias FINBLOQUESENTENCIAS COMIENZOBUCLEPARA DSENTENCIAS;

sentenciaforFuncion ::= COMIENZOBUCLEPARA IDEN RANGOBUCLEPARA expresion RANGO expresion DELIMFUNC listaSentenciasFuncion FINBLOQUESENTENCIAS COMIENZOBUCLEPARA DSENTENCIAS;

/*================================================*
 *===================ESCRIBIR=====================*
 *================================================*/

parametroEscribir ::= STRING | expresion | epsilon ;

sentenciaEscribir ::= ESCRIBIR PIZQUIERDO parametroEscribir PDERECHO DSENTENCIAS;

/*================================================*
 *===================DEVOLVER=====================*
 *================================================*/

sentenciaDevolver ::= FRETURN expresion DSENTENCIAS;



